
letrec [
  fun compare_cont_uncurried_uncurried_known_108<88>(y_242,x_243,r_244) :=
    case x_243 of {
    | xI =>
      let p_245 := proj_0 142 x_243 in
      case y_242 of {
      | xI =>
        let q_246 := proj_0 142 y_242 in
        compare_cont_uncurried_uncurried_known_108<88>(q_246,p_245,r_244)
      | xO =>
        let q_247 := proj_0 143 y_242 in
        let y_248 := Gt() in
        compare_cont_uncurried_uncurried_known_108<88>(q_247,p_245,y_248)
      | xH =>
        let y_249 := Gt() in
        halt y_249
      }
    | xO =>
      let p_250 := proj_0 143 x_243 in
      case y_242 of {
      | xI =>
        let q_251 := proj_0 142 y_242 in
        let y_252 := Lt() in
        compare_cont_uncurried_uncurried_known_108<88>(q_251,p_250,y_252)
      | xO =>
        let q_253 := proj_0 143 y_242 in
        compare_cont_uncurried_uncurried_known_108<88>(q_253,p_250,r_244)
      | xH =>
        let y_254 := Gt() in
        halt y_254
      }
    | xH =>
      case y_242 of {
      | xI =>
        let y_255 := Lt() in
        halt y_255
      | xO =>
        let y_256 := Lt() in
        halt y_256
      | xH =>
        halt r_244
      }
    }
  fun Coq.NArith.BinNatDef.N.compare_uncurried_known_109<88>(m_258,n_259,y_260) :=
    case n_259 of {
    | N0 =>
      case m_258 of {
      | N0 =>
        let y_261 := Eq() in
        halt y_261
      | Npos =>
        let y_262 := Lt() in
        halt y_262
      }
    | Npos =>
      let n'_263 := proj_0 113 n_259 in
      case m_258 of {
      | N0 =>
        let y_264 := Gt() in
        halt y_264
      | Npos =>
        let m'_265 := proj_0 113 m_258 in
        compare_cont_uncurried_uncurried_known_108<88>(m'_265,n'_263,y_260)
      }
    }
  fun Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(m_268,n_269) :=
    case n_269 of {
    | N0 =>
      case m_268 of {
      | N0 =>
        let y_270 := true() in
        halt y_270
      | Npos =>
        let y_271 := false() in
        halt y_271
      }
    | Npos =>
      let p_272 := proj_0 113 n_269 in
      case m_268 of {
      | N0 =>
        let y_273 := false() in
        halt y_273
      | Npos =>
        let q_274 := proj_0 113 m_268 in
        eqb_uncurried_known_111<3>(q_274,p_272)
      }
    }
  fun eqb_uncurried_known_111<3>(q_277,p_278) :=
    case p_278 of {
    | xI =>
      let p_279 := proj_0 142 p_278 in
      case q_277 of {
      | xI =>
        let q_280 := proj_0 142 q_277 in
        eqb_uncurried_known_111<3>(q_280,p_279)
      | xO =>
        let y_281 := false() in
        halt y_281
      | xH =>
        let y_282 := false() in
        halt y_282
      }
    | xO =>
      let p_283 := proj_0 143 p_278 in
      case q_277 of {
      | xI =>
        let y_284 := false() in
        halt y_284
      | xO =>
        let q_285 := proj_0 143 q_277 in
        eqb_uncurried_known_111<3>(q_285,p_283)
      | xH =>
        let y_286 := false() in
        halt y_286
      }
    | xH =>
      case q_277 of {
      | xI =>
        let y_287 := false() in
        halt y_287
      | xO =>
        let y_288 := false() in
        halt y_288
      | xH =>
        let y_289 := true() in
        halt y_289
      }
    }
  fun ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(n_291) :=
    case n_291 of {
    | bounded =>
      let val_293 := proj_0 108 n_291 in
      halt val_293
    }
  fun ConCert.Execution.BoundedN.BoundedN.eqb_spec_uncurried_uncurried_known_113<3>(b_295,a_296) :=
    let y_299 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(a_296) in
    let y_301 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(b_295) in
    let y_303 := app Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_301,y_299) in
    let y_305 := app f_case_known_114<130>(y_303) in
    let y_306 := con_99() in
    let y_code_307 := proj_0 15 y_305 in
    let y_env_308 := proj_1 15 y_305 in
    let r_309 := app y_code_307<3>(y_env_308,y_306) in
    let y_311 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(a_296) in
    let y_313 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(b_295) in
    let b0_315 := app Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_313,y_311) in
    let y_317 := app f_case_known_117<131>(r_309) in
    halt y_317
  fun f_case_known_114<130>(s_319) :=
    case s_319 of {
    | true =>
      let env_320 := con_160() in
      let y_wrapper_clo_321 := con_15(y_wrapper_115,env_320) in
      halt y_wrapper_clo_321
    | false =>
      let env_322 := con_163() in
      let y_wrapper_clo_323 := con_15(y_wrapper_116,env_322) in
      halt y_wrapper_clo_323
    }
  fun y_wrapper_115<3>(env_324,H_325) :=
    let y_326 := con_99() in
    let y_327 := ReflectT(y_326) in
    halt y_327
  fun y_wrapper_116<3>(env_328,H_329) :=
    let y_330 := con_99() in
    let y_331 := ReflectF(y_330) in
    halt y_331
  fun f_case_known_117<131>(s_333) :=
    case s_333 of {
    | ReflectT =>
      let y_334 := con_99() in
      let y_335 := ReflectT(y_334) in
      halt y_335
    | ReflectF =>
      let y_336 := con_99() in
      let y_337 := ReflectF(y_336) in
      halt y_337
    }
  fun ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_339,x_340) :=
    let r_343 := app ConCert.Execution.BoundedN.BoundedN.eqb_spec_uncurried_uncurried_known_113<3>(y_339,x_340) in
    let y_345 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(x_340) in
    let y_347 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(y_339) in
    let b_349 := app Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_347,y_345) in
    case r_343 of {
    | ReflectT =>
      let y_350 := con_99() in
      let y_351 := left(y_350) in
      halt y_351
    | ReflectF =>
      let y_352 := con_99() in
      let y_353 := right(y_352) in
      halt y_353
    }
  fun stdpp.countable.encode_uncurried_uncurried_known_119<132>(Countable_355) :=
    case Countable_355 of {
    | Build_Countable =>
      let encode_358 := proj_0 126 Countable_355 in
      halt encode_358
    }
  fun Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(s_360,f0_361,f_362) :=
    case s_360 of {
    | left =>
      let y_366 := con_99() in
      let f_code_367 := proj_0 15 f_362 in
      let f_env_368 := proj_1 15 f_362 in
      f_code_367<3>(f_env_368,y_366)
    | right =>
      let y_369 := con_99() in
      let f0_code_370 := proj_0 15 f0_361 in
      let f0_env_371 := proj_1 15 f0_361 in
      f0_code_370<3>(f0_env_371,y_369)
    }
  fun y_known_121<133>(x0_373) :=
    case x0_373 of {
    | xI =>
      let y_374 := con_99() in
      let y_375 := right(y_374) in
      halt y_375
    | xO =>
      let y_376 := con_99() in
      let y_377 := right(y_376) in
      halt y_377
    | xH =>
      let y_378 := con_99() in
      let y_379 := left(y_378) in
      halt y_379
    }
  fun y_wrapper_122<3>(env_380,x0_381) :=
    y_known_121<133>(x0_381)
  fun F_known_123<134>(p_384) :=
    case p_384 of {
    | xI =>
      let p_385 := proj_0 142 p_384 in
      let y_386 := app F_known_123<134>(p_385) in
      let env_387 := con_189(y_386) in
      let y_wrapper_clo_388 := con_15(y_wrapper_127,env_387) in
      halt y_wrapper_clo_388
    | xO =>
      let p_389 := proj_0 143 p_384 in
      let y_390 := app F_known_123<134>(p_389) in
      let env_391 := con_199(y_390) in
      let y_wrapper_clo_392 := con_15(y_wrapper_131,env_391) in
      halt y_wrapper_clo_392
    | xH =>
      let y_wrapperbogus_env_393 := con_201() in
      let y_wrapper_clo_394 := con_15(y_wrapper_122,y_wrapperbogus_env_393) in
      halt y_wrapper_clo_394
    }
  fun y_known_124<3>(x0_396,y_397) :=
    case x0_396 of {
    | xI =>
      let p_398 := proj_0 142 x0_396 in
      let env_402 := con_183() in
      let env_403 := con_186() in
      let y_code_404 := proj_0 15 y_397 in
      let y_env_405 := proj_1 15 y_397 in
      let y_406 := app y_code_404<3>(y_env_405,p_398) in
      let y_wrapper_clo_408 := con_15(y_wrapper_126,env_403) in
      let y_wrapper_clo_409 := con_15(y_wrapper_125,env_402) in
      Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(y_406,y_wrapper_clo_408,y_wrapper_clo_409)
    | xO =>
      let y_410 := con_99() in
      let y_411 := right(y_410) in
      halt y_411
    | xH =>
      let y_412 := con_99() in
      let y_413 := right(y_412) in
      halt y_413
    }
  fun y_wrapper_125<3>(env_414,a_415) :=
    let y_416 := con_99() in
    let y_417 := left(y_416) in
    halt y_417
  fun y_wrapper_126<3>(env_418,diseq_419) :=
    let y_420 := con_99() in
    let y_421 := right(y_420) in
    halt y_421
  fun y_wrapper_127<3>(env_422,x0_423) :=
    let y_proj_425 := proj_0 189 env_422 in
    y_known_124<3>(x0_423,y_proj_425)
  fun y_known_128<3>(x0_427,y_428) :=
    case x0_427 of {
    | xI =>
      let y_429 := con_99() in
      let y_430 := right(y_429) in
      halt y_430
    | xO =>
      let p_431 := proj_0 143 x0_427 in
      let env_435 := con_193() in
      let env_436 := con_196() in
      let y_code_437 := proj_0 15 y_428 in
      let y_env_438 := proj_1 15 y_428 in
      let y_439 := app y_code_437<3>(y_env_438,p_431) in
      let y_wrapper_clo_441 := con_15(y_wrapper_130,env_436) in
      let y_wrapper_clo_442 := con_15(y_wrapper_129,env_435) in
      Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(y_439,y_wrapper_clo_441,y_wrapper_clo_442)
    | xH =>
      let y_443 := con_99() in
      let y_444 := right(y_443) in
      halt y_444
    }
  fun y_wrapper_129<3>(env_445,a_446) :=
    let y_447 := con_99() in
    let y_448 := left(y_447) in
    halt y_448
  fun y_wrapper_130<3>(env_449,diseq_450) :=
    let y_451 := con_99() in
    let y_452 := right(y_451) in
    halt y_452
  fun y_wrapper_131<3>(env_453,x0_454) :=
    let y_proj_456 := proj_0 199 env_453 in
    y_known_128<3>(x0_454,y_proj_456)
  fun y_wrapper_132<3>(env_457,m_458) :=
    let n_proj_459 := proj_0 205 env_457 in
    let y_461 := app f_case_known_135<136>(n_proj_459) in
    let y_code_462 := proj_0 15 y_461 in
    let y_env_463 := proj_1 15 y_461 in
    y_code_462<3>(y_env_463,m_458)
  fun y_known_133<135>(x_465) :=
    case x_465 of {
    | N0 =>
      let y_466 := con_99() in
      let y_467 := left(y_466) in
      halt y_467
    | Npos =>
      let y_468 := con_99() in
      let y_469 := right(y_468) in
      halt y_469
    }
  fun y_wrapper_134<3>(env_470,x_471) :=
    y_known_133<135>(x_471)
  fun f_case_known_135<136>(s_474) :=
    case s_474 of {
    | N0 =>
      let y_wrapperbogus_env_475 := con_211() in
      let y_wrapper_clo_476 := con_15(y_wrapper_134,y_wrapperbogus_env_475) in
      halt y_wrapper_clo_476
    | Npos =>
      let p_477 := proj_0 113 s_474 in
      let env_478 := con_221(p_477) in
      let y_wrapper_clo_479 := con_15(y_wrapper_139,env_478) in
      halt y_wrapper_clo_479
    }
  fun y_known_136<3>(x_481,p_482) :=
    case x_481 of {
    | N0 =>
      let y_483 := con_99() in
      let y_484 := right(y_483) in
      halt y_484
    | Npos =>
      let p_485 := proj_0 113 x_481 in
      let env_489 := con_214() in
      let env_490 := con_217() in
      let y_492 := app F_known_123<134>(p_482) in
      let y_code_493 := proj_0 15 y_492 in
      let y_env_494 := proj_1 15 y_492 in
      let y_495 := app y_code_493<3>(y_env_494,p_485) in
      let y_wrapper_clo_497 := con_15(y_wrapper_138,env_490) in
      let y_wrapper_clo_498 := con_15(y_wrapper_137,env_489) in
      Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(y_495,y_wrapper_clo_497,y_wrapper_clo_498)
    }
  fun y_wrapper_137<3>(env_499,a_500) :=
    let y_501 := con_99() in
    let y_502 := left(y_501) in
    halt y_502
  fun y_wrapper_138<3>(env_503,diseq_504) :=
    let y_505 := con_99() in
    let y_506 := right(y_505) in
    halt y_506
  fun y_wrapper_139<3>(env_507,x_508) :=
    let p_proj_510 := proj_0 221 env_507 in
    y_known_136<3>(x_508,p_proj_510)
  fun Coq.NArith.BinNat.N.eq_dec_wrapper_140<3>(env_511,n_512) :=
    let env_513 := con_205(n_512) in
    let y_wrapper_clo_514 := con_15(y_wrapper_132,env_513) in
    halt y_wrapper_clo_514
  fun succ_known_141<137>(x_516) :=
    case x_516 of {
    | xI =>
      let p_517 := proj_0 142 x_516 in
      let y_518 := app succ_known_141<137>(p_517) in
      let y_519 := xO(y_518) in
      halt y_519
    | xO =>
      let p_520 := proj_0 143 x_516 in
      let y_521 := xI(p_520) in
      halt y_521
    | xH =>
      let y_522 := xH() in
      let y_523 := xO(y_522) in
      halt y_523
    }
  fun pred_double_known_142<138>(x_525) :=
    case x_525 of {
    | xI =>
      let p_526 := proj_0 142 x_525 in
      let y_527 := xO(p_526) in
      let y_528 := xI(y_527) in
      halt y_528
    | xO =>
      let p_529 := proj_0 143 x_525 in
      let y_530 := app pred_double_known_142<138>(p_529) in
      let y_531 := xI(y_530) in
      halt y_531
    | xH =>
      let y_532 := xH() in
      halt y_532
    }
  fun program_branch_0_wrapper_143<3>(env_533,Heq_x_534) :=
    let y_535 := xH() in
    halt y_535
  fun f_case_known_144<139>(s_537) :=
    case s_537 of {
    | N0 =>
      let program_branch_0_wrapperbogus_env_538 := con_234() in
      let program_branch_0_wrapper_clo_539 := con_15(program_branch_0_wrapper_143,program_branch_0_wrapperbogus_env_538) in
      halt program_branch_0_wrapper_clo_539
    | Npos =>
      let p_540 := proj_0 113 s_537 in
      let env_541 := con_237(p_540) in
      let y_wrapper_clo_542 := con_15(y_wrapper_145,env_541) in
      halt y_wrapper_clo_542
    }
  fun y_wrapper_145<3>(env_543,Heq_x_544) :=
    let p_proj_545 := proj_0 237 env_543 in
    succ_known_141<137>(p_proj_545)
  fun y_wrapper_146<3>(env_547,x_548) :=
    let y_550 := app f_case_known_144<139>(x_548) in
    let y_551 := con_99() in
    let y_code_552 := proj_0 15 y_550 in
    let y_env_553 := proj_1 15 y_550 in
    y_code_552<3>(y_env_553,y_551)
  fun y_known_147<140>(p_555) :=
    let y_556 := xH() in
    let y_558 := app F_known_123<134>(p_555) in
    let y_code_559 := proj_0 15 y_558 in
    let y_env_560 := proj_1 15 y_558 in
    let y_561 := app y_code_559<3>(y_env_560,y_556) in
    case y_561 of {
    | left =>
      let y_562 := N0() in
      let y_563 := Some(y_562) in
      halt y_563
    | right =>
      let y_565 := app f_case_known_148<141>(p_555) in
      let y_566 := Npos(y_565) in
      let y_567 := Some(y_566) in
      halt y_567
    }
  fun f_case_known_148<141>(s_569) :=
    case s_569 of {
    | xI =>
      let p_570 := proj_0 142 s_569 in
      let y_571 := xO(p_570) in
      halt y_571
    | xO =>
      let p_572 := proj_0 143 s_569 in
      pred_double_known_142<138>(p_572)
    | xH =>
      let y_574 := xH() in
      halt y_574
    }
  fun y_wrapper_149<3>(env_575,p_576) :=
    y_known_147<140>(p_576)
  fun ConCert.Execution.Monad.bind_uncurried_known_150<142>(Monad_579) :=
    case Monad_579 of {
    | build_monad =>
      let bind_581 := proj_1 106 Monad_579 in
      halt bind_581
    }
  fun y_wrapper_151<3>(env_582,t_583) :=
    let y_584 := Some(t_583) in
    halt y_584
  fun y_wrapper_152<3>(env_585,t_586) :=
    let env_587 := con_250() in
    let y_wrapper_clo_588 := con_15(y_wrapper_151,env_587) in
    halt y_wrapper_clo_588
  fun y_wrapper_153<3>(env_589,f_590) :=
    let v_proj_593 := proj_0 259 env_589 in
    y_uncurried_uncurried_uncurried_known_156<3>(f_590,v_proj_593)
  fun y_wrapper_154<3>(env_595,v_596) :=
    let t_proj_597 := proj_1 261 env_595 in
    let u_proj_598 := proj_0 261 env_595 in
    let env_599 := con_259(v_596,u_proj_598,t_proj_597) in
    let y_wrapper_clo_600 := con_15(y_wrapper_153,env_599) in
    halt y_wrapper_clo_600
  fun y_wrapper_155<3>(env_601,u_602) :=
    let t_proj_603 := proj_0 263 env_601 in
    let env_604 := con_261(u_602,t_proj_603) in
    let y_wrapper_clo_605 := con_15(y_wrapper_154,env_604) in
    halt y_wrapper_clo_605
  fun y_uncurried_uncurried_uncurried_known_156<3>(f_607,v_608) :=
    case v_608 of {
    | Some =>
      let val_611 := proj_0 145 v_608 in
      let f_code_612 := proj_0 15 f_607 in
      let f_env_613 := proj_1 15 f_607 in
      f_code_612<3>(f_env_613,val_611)
    | None =>
      let y_614 := None() in
      halt y_614
    }
  fun y_wrapper_157<3>(env_615,t_616) :=
    let env_617 := con_263(t_616) in
    let y_wrapper_clo_618 := con_15(y_wrapper_155,env_617) in
    halt y_wrapper_clo_618
  fun stdpp.countable.decode_uncurried_uncurried_known_158<143>(Countable_620) :=
    case Countable_620 of {
    | Build_Countable =>
      let decode_623 := proj_1 126 Countable_620 in
      halt decode_623
    }
  fun y_known_159<3>(n_625,stdpp.countable.N_countable_626) :=
    let y_632 := app stdpp.countable.encode_uncurried_uncurried_known_119<132>(stdpp.countable.N_countable_626) in
    let y_634 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(n_625) in
    let y_code_635 := proj_0 15 y_632 in
    let y_env_636 := proj_1 15 y_632 in
    y_code_635<3>(y_env_636,y_634)
  fun y_wrapper_160<3>(env_637,n_638) :=
    let stdpp.countable.N_countable_proj_640 := proj_1 273 env_637 in
    y_known_159<3>(n_638,stdpp.countable.N_countable_proj_640)
  fun y_161<3>(env_642,n_643) :=
    let ConCert.Execution.OptionMonad.Monad_option_proj_646 := proj_1 275 env_642 in
    let y_647 := app ConCert.Execution.Monad.bind_uncurried_known_150<142>(ConCert.Execution.OptionMonad.Monad_option_proj_646) in
    let y_648 := con_99() in
    let y_code_649 := proj_0 15 y_647 in
    let y_env_650 := proj_1 15 y_647 in
    let y_651 := app y_code_649<3>(y_env_650,y_648) in
    let y_652 := con_99() in
    let y_code_653 := proj_0 15 y_651 in
    let y_env_654 := proj_1 15 y_651 in
    let y_655 := app y_code_653<3>(y_env_654,y_652) in
    let stdpp.countable.N_countable_proj_658 := proj_2 275 env_642 in
    let y_661 := app stdpp.countable.decode_uncurried_uncurried_known_158<143>(stdpp.countable.N_countable_proj_658) in
    let y_code_662 := proj_0 15 y_661 in
    let y_env_663 := proj_1 15 y_661 in
    let y_664 := app y_code_662<3>(y_env_663,n_643) in
    let y_code_665 := proj_0 15 y_655 in
    let y_env_666 := proj_1 15 y_655 in
    let y_667 := app y_code_665<3>(y_env_666,y_664) in
    let bound_proj_668 := proj_0 275 env_642 in
    let y_proj_669 := proj_3 275 env_642 in
    let env_670 := con_282(bound_proj_668,y_proj_669) in
    let y_wrapper_clo_671 := con_15(y_wrapper_164,env_670) in
    let y_code_672 := proj_0 15 y_667 in
    let y_env_673 := proj_1 15 y_667 in
    y_code_672<3>(y_env_673,y_wrapper_clo_671)
  fun y_known_162<88>(n_675,y_676,bound_677) :=
    let y_680 := app Coq.NArith.BinNatDef.N.compare_uncurried_known_109<88>(n_675,bound_677,y_676) in
    let y_681 := app f_case_known_163<144>(y_680) in
    case y_681 of {
    | Some =>
      let y_682 := con_99() in
      let y_683 := bounded(n_675,y_682) in
      let y_684 := Some(y_683) in
      halt y_684
    | None =>
      let y_685 := None() in
      halt y_685
    }
  fun f_case_known_163<144>(s_687) :=
    case s_687 of {
    | Eq =>
      let y_688 := None() in
      halt y_688
    | Lt =>
      let y_689 := None() in
      halt y_689
    | Gt =>
      let y_690 := con_99() in
      let y_691 := Some(y_690) in
      halt y_691
    }
  fun y_wrapper_164<3>(env_692,n_693) :=
    let y_proj_695 := proj_1 282 env_692 in
    let bound_proj_696 := proj_0 282 env_692 in
    y_known_162<88>(n_693,y_proj_695,bound_proj_696)
  fun ConCert.Execution.Serializable.serialize_uncurried_known_165<145>(Serializable_698) :=
    case Serializable_698 of {
    | build_serializable =>
      let serialize_700 := proj_0 116 Serializable_698 in
      halt serialize_700
    }
  fun y_wrapper_166<3>(env_701,i_702) :=
    let y_703 := ser_int() in
    let y_704 := build_ser_value(y_703,i_702) in
    halt y_704
  fun y_167<3>(env_705,value_706) :=
    let y_708 := app f_case_known_168<146>(value_706) in
    let y_710 := app f_case_known_169<147>(value_706) in
    let y_proj_712 := proj_0 288 env_705 in
    let b_713 := app SerializedType_eqrec_uncurried_known_170<3>(y_708,y_proj_712) in
    let H_715 := app f_case_known_171<148>(b_713) in
    let s_717 := app f_case_known_172<149>(H_715) in
    case s_717 of {
    | left =>
      let y_718 := Some(y_710) in
      halt y_718
    | right =>
      let y_719 := None() in
      halt y_719
    }
  fun f_case_known_168<146>(s_721) :=
    case s_721 of {
    | build_ser_value =>
      let anon_722 := proj_0 117 s_721 in
      halt anon_722
    }
  fun f_case_known_169<147>(s_724) :=
    case s_724 of {
    | build_ser_value =>
      let anon_725 := proj_1 117 s_724 in
      halt anon_725
    }
  fun SerializedType_eqrec_uncurried_known_170<3>(Y_727,X_728) :=
    case X_728 of {
    | ser_unit =>
      case Y_727 of {
      | ser_unit =>
        let y_729 := true() in
        halt y_729
      | ser_int =>
        let y_730 := false() in
        halt y_730
      | ser_bool =>
        let y_731 := false() in
        halt y_731
      | ser_pair =>
        let y_732 := false() in
        halt y_732
      | ser_list =>
        let y_733 := false() in
        halt y_733
      }
    | ser_int =>
      case Y_727 of {
      | ser_unit =>
        let y_734 := false() in
        halt y_734
      | ser_int =>
        let y_735 := true() in
        halt y_735
      | ser_bool =>
        let y_736 := false() in
        halt y_736
      | ser_pair =>
        let y_737 := false() in
        halt y_737
      | ser_list =>
        let y_738 := false() in
        halt y_738
      }
    | ser_bool =>
      case Y_727 of {
      | ser_unit =>
        let y_739 := false() in
        halt y_739
      | ser_int =>
        let y_740 := false() in
        halt y_740
      | ser_bool =>
        let y_741 := true() in
        halt y_741
      | ser_pair =>
        let y_742 := false() in
        halt y_742
      | ser_list =>
        let y_743 := false() in
        halt y_743
      }
    | ser_pair =>
      let anon_744 := proj_0 124 X_728 in
      let anon_745 := proj_1 124 X_728 in
      case Y_727 of {
      | ser_unit =>
        let y_746 := false() in
        halt y_746
      | ser_int =>
        let y_747 := false() in
        halt y_747
      | ser_bool =>
        let y_748 := false() in
        halt y_748
      | ser_pair =>
        let anon_749 := proj_0 124 Y_727 in
        let anon_750 := proj_1 124 Y_727 in
        let y_751 := app SerializedType_eqrec_uncurried_known_170<3>(anon_749,anon_744) in
        let y_752 := app SerializedType_eqrec_uncurried_known_170<3>(anon_750,anon_745) in
        case y_751 of {
        | true =>
          halt y_752
        | false =>
          let y_753 := false() in
          halt y_753
        }
      | ser_list =>
        let y_754 := false() in
        halt y_754
      }
    | ser_list =>
      let anon_755 := proj_0 125 X_728 in
      case Y_727 of {
      | ser_unit =>
        let y_756 := false() in
        halt y_756
      | ser_int =>
        let y_757 := false() in
        halt y_757
      | ser_bool =>
        let y_758 := false() in
        halt y_758
      | ser_pair =>
        let y_759 := false() in
        halt y_759
      | ser_list =>
        let anon_760 := proj_0 125 Y_727 in
        SerializedType_eqrec_uncurried_known_170<3>(anon_760,anon_755)
      }
    }
  fun f_case_known_171<148>(s_762) :=
    case s_762 of {
    | true =>
      let y_763 := con_99() in
      let y_764 := left(y_763) in
      halt y_764
    | false =>
      let y_765 := con_99() in
      let y_766 := right(y_765) in
      halt y_766
    }
  fun f_case_known_172<149>(s_768) :=
    case s_768 of {
    | left =>
      let y_769 := con_99() in
      let y_770 := left(y_769) in
      halt y_770
    | right =>
      let y_771 := con_99() in
      let y_772 := right(y_771) in
      halt y_772
    }
  fun ConCert.Execution.Serializable.deserialize_uncurried_known_173<150>(Serializable_774) :=
    case Serializable_774 of {
    | build_serializable =>
      let deserialize_776 := proj_1 116 Serializable_774 in
      halt deserialize_776
    }
  fun Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(y_778,x_779,y_780) :=
    let y_782 := app f_case_known_175<88>(x_779,y_780,y_778) in
    case y_782 of {
    | Eq =>
      let y_783 := false() in
      halt y_783
    | Lt =>
      let y_784 := true() in
      halt y_784
    | Gt =>
      let y_785 := false() in
      halt y_785
    }
  fun f_case_known_175<88>(s_787,y_788,y_789) :=
    case s_787 of {
    | Z0 =>
      case y_789 of {
      | Z0 =>
        let y_790 := Eq() in
        halt y_790
      | Zpos =>
        let y_791 := Lt() in
        halt y_791
      | Zneg =>
        let y_792 := Gt() in
        halt y_792
      }
    | Zpos =>
      let x'_793 := proj_0 140 s_787 in
      case y_789 of {
      | Z0 =>
        let y_794 := Gt() in
        halt y_794
      | Zpos =>
        let y'_795 := proj_0 140 y_789 in
        compare_cont_uncurried_uncurried_known_108<88>(y'_795,x'_793,y_788)
      | Zneg =>
        let y_797 := Gt() in
        halt y_797
      }
    | Zneg =>
      let x'_798 := proj_0 141 s_787 in
      case y_789 of {
      | Z0 =>
        let y_799 := Lt() in
        halt y_799
      | Zpos =>
        let y_800 := Lt() in
        halt y_800
      | Zneg =>
        let y'_801 := proj_0 141 y_789 in
        let y_803 := app compare_cont_uncurried_uncurried_known_108<88>(y'_801,x'_798,y_788) in
        case y_803 of {
        | Eq =>
          let y_804 := Eq() in
          halt y_804
        | Lt =>
          let y_805 := Gt() in
          halt y_805
        | Gt =>
          let y_806 := Lt() in
          halt y_806
        }
      }
    }
  fun y_wrapper_176<3>(env_807,p_808) :=
    let ConCert.Execution.Serializable.int_serializable_proj_809 := proj_0 301 env_807 in
    let y_812 := app ConCert.Execution.Serializable.serialize_uncurried_known_165<145>(ConCert.Execution.Serializable.int_serializable_proj_809) in
    let y_813 := Zpos(p_808) in
    let y_code_814 := proj_0 15 y_812 in
    let y_env_815 := proj_1 15 y_812 in
    y_code_814<3>(y_env_815,y_813)
  fun y_177<3>(env_816,z_817) :=
    let ConCert.Execution.OptionMonad.Monad_option_proj_820 := proj_1 303 env_816 in
    let y_821 := app ConCert.Execution.Monad.bind_uncurried_known_150<142>(ConCert.Execution.OptionMonad.Monad_option_proj_820) in
    let y_822 := con_99() in
    let y_code_823 := proj_0 15 y_821 in
    let y_env_824 := proj_1 15 y_821 in
    let y_825 := app y_code_823<3>(y_env_824,y_822) in
    let y_826 := con_99() in
    let y_code_827 := proj_0 15 y_825 in
    let y_env_828 := proj_1 15 y_825 in
    let y_829 := app y_code_827<3>(y_env_828,y_826) in
    let ConCert.Execution.Serializable.int_serializable_proj_832 := proj_2 303 env_816 in
    let y_833 := app ConCert.Execution.Serializable.deserialize_uncurried_known_173<150>(ConCert.Execution.Serializable.int_serializable_proj_832) in
    let y_code_834 := proj_0 15 y_833 in
    let y_env_835 := proj_1 15 y_833 in
    let y_836 := app y_code_834<3>(y_env_835,z_817) in
    let y_code_837 := proj_0 15 y_829 in
    let y_env_838 := proj_1 15 y_829 in
    let y_839 := app y_code_837<3>(y_env_838,y_836) in
    let y_proj_840 := proj_0 303 env_816 in
    let env_841 := con_309(y_proj_840) in
    let y_wrapper_clo_842 := con_15(y_wrapper_180,env_841) in
    let y_code_843 := proj_0 15 y_839 in
    let y_env_844 := proj_1 15 y_839 in
    y_code_843<3>(y_env_844,y_wrapper_clo_842)
  fun y_known_178<3>(z'_846,y_847) :=
    let y_848 := Z0() in
    let y_850 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(z'_846,y_848,y_847) in
    case y_850 of {
    | true =>
      let y_852 := app f_case_known_179<151>(z'_846) in
      let y_853 := Some(y_852) in
      halt y_853
    | false =>
      let y_854 := None() in
      halt y_854
    }
  fun f_case_known_179<151>(s_856) :=
    case s_856 of {
    | Z0 =>
      let y_857 := xH() in
      halt y_857
    | Zpos =>
      let p_858 := proj_0 140 s_856 in
      halt p_858
    | Zneg =>
      let y_859 := xH() in
      halt y_859
    }
  fun y_wrapper_180<3>(env_860,z'_861) :=
    let y_proj_863 := proj_0 309 env_860 in
    y_known_178<3>(z'_861,y_proj_863)
  fun Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(y_865,x_866,y_867) :=
    let y_869 := app Coq.NArith.BinNatDef.N.compare_uncurried_known_109<88>(y_865,x_866,y_867) in
    case y_869 of {
    | Eq =>
      let y_870 := true() in
      halt y_870
    | Lt =>
      let y_871 := true() in
      halt y_871
    | Gt =>
      let y_872 := false() in
      halt y_872
    }
  fun Coq.NArith.BinNatDef.N.succ_double_known_182<152>(x_874) :=
    case x_874 of {
    | N0 =>
      let y_875 := xH() in
      let y_876 := Npos(y_875) in
      halt y_876
    | Npos =>
      let p_877 := proj_0 113 x_874 in
      let y_878 := xI(p_877) in
      let y_879 := Npos(y_878) in
      halt y_879
    }
  fun Coq.PArith.BinPosDef.Pos.double_mask_known_183<153>(x_881) :=
    case x_881 of {
    | IsNul =>
      let y_882 := IsNul() in
      halt y_882
    | IsPos =>
      let p_883 := proj_0 104 x_881 in
      let y_884 := xO(p_883) in
      let y_885 := IsPos(y_884) in
      halt y_885
    | IsNeg =>
      let y_886 := IsNeg() in
      halt y_886
    }
  fun Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<154>(x_888) :=
    case x_888 of {
    | IsNul =>
      let y_889 := xH() in
      let y_890 := IsPos(y_889) in
      halt y_890
    | IsPos =>
      let p_891 := proj_0 104 x_888 in
      let y_892 := xI(p_891) in
      let y_893 := IsPos(y_892) in
      halt y_893
    | IsNeg =>
      let y_894 := IsNeg() in
      halt y_894
    }
  fun Coq.NArith.BinNatDef.N.sub_uncurried_known_185<3>(m_896,n_897) :=
    case n_897 of {
    | N0 =>
      let y_898 := N0() in
      halt y_898
    | Npos =>
      let n'_899 := proj_0 113 n_897 in
      case m_896 of {
      | N0 =>
        halt n_897
      | Npos =>
        let m'_900 := proj_0 113 m_896 in
        let y_902 := app sub_mask_uncurried_known_186<3>(m'_900,n'_899) in
        case y_902 of {
        | IsNul =>
          let y_903 := N0() in
          halt y_903
        | IsPos =>
          let p_904 := proj_0 104 y_902 in
          let y_905 := Npos(p_904) in
          halt y_905
        | IsNeg =>
          let y_906 := N0() in
          halt y_906
        }
      }
    }
  fun sub_mask_uncurried_known_186<3>(y_908,x_909) :=
    case x_909 of {
    | xI =>
      let p_910 := proj_0 142 x_909 in
      case y_908 of {
      | xI =>
        let q_911 := proj_0 142 y_908 in
        let y_912 := app sub_mask_uncurried_known_186<3>(q_911,p_910) in
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<153>(y_912)
      | xO =>
        let q_914 := proj_0 143 y_908 in
        let y_915 := app sub_mask_uncurried_known_186<3>(q_914,p_910) in
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<154>(y_915)
      | xH =>
        let y_917 := xO(p_910) in
        let y_918 := IsPos(y_917) in
        halt y_918
      }
    | xO =>
      let p_919 := proj_0 143 x_909 in
      case y_908 of {
      | xI =>
        let q_920 := proj_0 142 y_908 in
        let y_921 := app sub_mask_carry_uncurried_known_187<3>(q_920,p_919) in
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<154>(y_921)
      | xO =>
        let q_923 := proj_0 143 y_908 in
        let y_924 := app sub_mask_uncurried_known_186<3>(q_923,p_919) in
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<153>(y_924)
      | xH =>
        let y_927 := app pred_double_known_142<138>(p_919) in
        let y_928 := IsPos(y_927) in
        halt y_928
      }
    | xH =>
      case y_908 of {
      | xI =>
        let y_929 := IsNeg() in
        halt y_929
      | xO =>
        let y_930 := IsNeg() in
        halt y_930
      | xH =>
        let y_931 := IsNul() in
        halt y_931
      }
    }
  fun sub_mask_carry_uncurried_known_187<3>(y_933,x_934) :=
    case x_934 of {
    | xI =>
      let p_935 := proj_0 142 x_934 in
      case y_933 of {
      | xI =>
        let q_936 := proj_0 142 y_933 in
        let y_937 := app sub_mask_carry_uncurried_known_187<3>(q_936,p_935) in
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<154>(y_937)
      | xO =>
        let q_939 := proj_0 143 y_933 in
        let y_940 := app sub_mask_uncurried_known_186<3>(q_939,p_935) in
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<153>(y_940)
      | xH =>
        let y_943 := app pred_double_known_142<138>(p_935) in
        let y_944 := IsPos(y_943) in
        halt y_944
      }
    | xO =>
      let p_945 := proj_0 143 x_934 in
      case y_933 of {
      | xI =>
        let q_946 := proj_0 142 y_933 in
        let y_947 := app sub_mask_carry_uncurried_known_187<3>(q_946,p_945) in
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<153>(y_947)
      | xO =>
        let q_949 := proj_0 143 y_933 in
        let y_950 := app sub_mask_carry_uncurried_known_187<3>(q_949,p_945) in
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<154>(y_950)
      | xH =>
        case p_945 of {
        | xI =>
          let p_952 := proj_0 142 p_945 in
          let y_953 := xO(p_952) in
          let y_954 := xO(y_953) in
          let y_955 := IsPos(y_954) in
          halt y_955
        | xO =>
          let p_956 := proj_0 143 p_945 in
          let y_958 := app pred_double_known_142<138>(p_956) in
          let y_959 := xO(y_958) in
          let y_960 := IsPos(y_959) in
          halt y_960
        | xH =>
          let y_961 := IsNul() in
          halt y_961
        }
      }
    | xH =>
      let y_962 := IsNeg() in
      halt y_962
    }
  fun Coq.NArith.BinNatDef.N.double_known_188<155>(n_964) :=
    case n_964 of {
    | N0 =>
      let y_965 := N0() in
      halt y_965
    | Npos =>
      let p_966 := proj_0 113 n_964 in
      let y_967 := xO(p_966) in
      let y_968 := Npos(y_967) in
      halt y_968
    }
  fun add_uncurried_known_189<3>(y_970,x_971) :=
    case x_971 of {
    | xI =>
      let p_972 := proj_0 142 x_971 in
      case y_970 of {
      | xI =>
        let q_973 := proj_0 142 y_970 in
        let y_974 := app add_carry_uncurried_known_190<3>(q_973,p_972) in
        let y_975 := xO(y_974) in
        halt y_975
      | xO =>
        let q_976 := proj_0 143 y_970 in
        let y_977 := app add_uncurried_known_189<3>(q_976,p_972) in
        let y_978 := xI(y_977) in
        halt y_978
      | xH =>
        let y_980 := app succ_known_141<137>(p_972) in
        let y_981 := xO(y_980) in
        halt y_981
      }
    | xO =>
      let p_982 := proj_0 143 x_971 in
      case y_970 of {
      | xI =>
        let q_983 := proj_0 142 y_970 in
        let y_984 := app add_uncurried_known_189<3>(q_983,p_982) in
        let y_985 := xI(y_984) in
        halt y_985
      | xO =>
        let q_986 := proj_0 143 y_970 in
        let y_987 := app add_uncurried_known_189<3>(q_986,p_982) in
        let y_988 := xO(y_987) in
        halt y_988
      | xH =>
        let y_989 := xI(p_982) in
        halt y_989
      }
    | xH =>
      case y_970 of {
      | xI =>
        let q_990 := proj_0 142 y_970 in
        let y_992 := app succ_known_141<137>(q_990) in
        let y_993 := xO(y_992) in
        halt y_993
      | xO =>
        let q_994 := proj_0 143 y_970 in
        let y_995 := xI(q_994) in
        halt y_995
      | xH =>
        let y_996 := xH() in
        let y_997 := xO(y_996) in
        halt y_997
      }
    }
  fun add_carry_uncurried_known_190<3>(y_999,x_1000) :=
    case x_1000 of {
    | xI =>
      let p_1001 := proj_0 142 x_1000 in
      case y_999 of {
      | xI =>
        let q_1002 := proj_0 142 y_999 in
        let y_1003 := app add_carry_uncurried_known_190<3>(q_1002,p_1001) in
        let y_1004 := xI(y_1003) in
        halt y_1004
      | xO =>
        let q_1005 := proj_0 143 y_999 in
        let y_1006 := app add_carry_uncurried_known_190<3>(q_1005,p_1001) in
        let y_1007 := xO(y_1006) in
        halt y_1007
      | xH =>
        let y_1009 := app succ_known_141<137>(p_1001) in
        let y_1010 := xI(y_1009) in
        halt y_1010
      }
    | xO =>
      let p_1011 := proj_0 143 x_1000 in
      case y_999 of {
      | xI =>
        let q_1012 := proj_0 142 y_999 in
        let y_1013 := app add_carry_uncurried_known_190<3>(q_1012,p_1011) in
        let y_1014 := xO(y_1013) in
        halt y_1014
      | xO =>
        let q_1015 := proj_0 143 y_999 in
        let y_1016 := app add_uncurried_known_189<3>(q_1015,p_1011) in
        let y_1017 := xI(y_1016) in
        halt y_1017
      | xH =>
        let y_1019 := app succ_known_141<137>(p_1011) in
        let y_1020 := xO(y_1019) in
        halt y_1020
      }
    | xH =>
      case y_999 of {
      | xI =>
        let q_1021 := proj_0 142 y_999 in
        let y_1023 := app succ_known_141<137>(q_1021) in
        let y_1024 := xI(y_1023) in
        halt y_1024
      | xO =>
        let q_1025 := proj_0 143 y_999 in
        let y_1027 := app succ_known_141<137>(q_1025) in
        let y_1028 := xO(y_1027) in
        halt y_1028
      | xH =>
        let y_1029 := xH() in
        let y_1030 := xI(y_1029) in
        halt y_1030
      }
    }
  fun f_case_known_191<3>(s_1032,y_1033) :=
    case s_1032 of {
    | N0 =>
      let y_1034 := xH() in
      let y_1035 := Npos(y_1034) in
      halt y_1035
    | Npos =>
      let p_1036 := proj_0 113 s_1032 in
      let y_1037 := xH() in
      let env_1038 := con_345(y_1033) in
      let y_1039 := app iter_fix_uncurried_193<88>(env_1038,p_1036,y_1037) in
      let y_1040 := Npos(y_1039) in
      halt y_1040
    }
  fun mul_uncurried_known_192<3>(y_1042,x_1043) :=
    case x_1043 of {
    | xI =>
      let p_1044 := proj_0 142 x_1043 in
      let y_1045 := app mul_uncurried_known_192<3>(y_1042,p_1044) in
      let y_1046 := xO(y_1045) in
      add_uncurried_known_189<3>(y_1046,y_1042)
    | xO =>
      let p_1048 := proj_0 143 x_1043 in
      let y_1049 := app mul_uncurried_known_192<3>(y_1042,p_1048) in
      let y_1050 := xO(y_1049) in
      halt y_1050
    | xH =>
      halt y_1042
    }
  fun iter_fix_uncurried_193<88>(env_1051,n_1052,x_1053) :=
    case n_1052 of {
    | xI =>
      let n'_1054 := proj_0 142 n_1052 in
      let y_1055 := app iter_fix_uncurried_193<88>(env_1051,n'_1054,x_1053) in
      let y_1056 := app iter_fix_uncurried_193<88>(env_1051,n'_1054,y_1055) in
      let y_proj_1058 := proj_0 345 env_1051 in
      mul_uncurried_known_192<3>(y_1056,y_proj_1058)
    | xO =>
      let n'_1059 := proj_0 143 n_1052 in
      let y_1060 := app iter_fix_uncurried_193<88>(env_1051,n'_1059,x_1053) in
      iter_fix_uncurried_193<88>(env_1051,n'_1059,y_1060)
    | xH =>
      let y_proj_1062 := proj_0 345 env_1051 in
      mul_uncurried_known_192<3>(x_1053,y_proj_1062)
    }
  fun y_wrapper_194<3>(env_1063,b_1064) :=
    let a_proj_1066 := proj_0 353 env_1063 in
    let y_1068 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(a_proj_1066) in
    let y_1070 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(b_1064) in
    Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_1070,y_1068)
  fun y_wrapper_195<3>(env_1072,a_1073) :=
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1074 := proj_0 355 env_1072 in
    let env_1075 := con_353(a_1073,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1074) in
    let y_wrapper_clo_1076 := con_15(y_wrapper_194,env_1075) in
    halt y_wrapper_clo_1076
  fun y_wrapper_196<3>(env_1077,b_1078) :=
    let a_proj_1080 := proj_0 360 env_1077 in
    ConCert.Execution.BoundedN.BoundedN.eqb_spec_uncurried_uncurried_known_113<3>(b_1078,a_proj_1080)
  fun y_wrapper_197<3>(env_1082,a_1083) :=
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1084 := proj_0 362 env_1082 in
    let env_1085 := con_360(a_1083,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1084) in
    let y_wrapper_clo_1086 := con_15(y_wrapper_196,env_1085) in
    halt y_wrapper_clo_1086
  fun y_wrapper_198<3>(env_1087,y_1088) :=
    let x_proj_1090 := proj_0 367 env_1087 in
    ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_1088,x_proj_1090)
  fun y_wrapper_199<3>(env_1092,x_1093) :=
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1094 := proj_0 369 env_1092 in
    let env_1095 := con_367(x_1093,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1094) in
    let y_wrapper_clo_1096 := con_15(y_wrapper_198,env_1095) in
    halt y_wrapper_clo_1096
  fun y_known_200<99>(bn_1098,y_1099,stdpp.countable.N_countable_1100,ConCert.Execution.OptionMonad.Monad_option_1101,ConCert.Execution.Serializable.ser_positive_equivalence_1102,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1103) :=
    let y_1106 := app ConCert.Execution.Serializable.serialize_uncurried_known_165<145>(ConCert.Execution.Serializable.ser_positive_equivalence_1102) in
    let env_1109 := con_273(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1103,stdpp.countable.N_countable_1100) in
    let env_1110 := con_275(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1103,ConCert.Execution.OptionMonad.Monad_option_1101,stdpp.countable.N_countable_1100,y_1099) in
    let y_1111 := con_99() in
    let y_wrapper_clo_1112 := con_15(y_wrapper_160,env_1109) in
    let y_clo_1113 := con_15(y_161,env_1110) in
    let y_1114 := Build_Countable(y_wrapper_clo_1112,y_clo_1113,y_1111) in
    let y_1117 := app stdpp.countable.encode_uncurried_uncurried_known_119<132>(y_1114) in
    let y_code_1118 := proj_0 15 y_1117 in
    let y_env_1119 := proj_1 15 y_1117 in
    let y_1120 := app y_code_1118<3>(y_env_1119,bn_1098) in
    let y_code_1121 := proj_0 15 y_1106 in
    let y_env_1122 := proj_1 15 y_1106 in
    y_code_1121<3>(y_env_1122,y_1120)
  fun y_wrapper_201<3>(env_1123,y_1124) :=
    let x_proj_1126 := proj_0 376 env_1123 in
    ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_1124,x_proj_1126)
  fun y_wrapper_203<3>(env_1133,bn_1134) :=
    let y_proj_1136 := proj_0 382 env_1133 in
    let stdpp.countable.N_countable_proj_1137 := proj_1 382 env_1133 in
    let ConCert.Execution.OptionMonad.Monad_option_proj_1138 := proj_2 382 env_1133 in
    let ConCert.Execution.Serializable.ser_positive_equivalence_proj_1139 := proj_3 382 env_1133 in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1140 := proj_4 382 env_1133 in
    y_known_200<99>(bn_1134,y_proj_1136,stdpp.countable.N_countable_proj_1137,ConCert.Execution.OptionMonad.Monad_option_proj_1138,ConCert.Execution.Serializable.ser_positive_equivalence_proj_1139,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1140)
  fun y_204<3>(env_1141,v_1142) :=
    let ConCert.Execution.OptionMonad.Monad_option_proj_1145 := proj_2 384 env_1141 in
    let y_1146 := app ConCert.Execution.Monad.bind_uncurried_known_150<142>(ConCert.Execution.OptionMonad.Monad_option_proj_1145) in
    let y_1147 := con_99() in
    let y_code_1148 := proj_0 15 y_1146 in
    let y_env_1149 := proj_1 15 y_1146 in
    let y_1150 := app y_code_1148<3>(y_env_1149,y_1147) in
    let y_1151 := con_99() in
    let y_code_1152 := proj_0 15 y_1150 in
    let y_env_1153 := proj_1 15 y_1150 in
    let y_1154 := app y_code_1152<3>(y_env_1153,y_1151) in
    let ConCert.Execution.Serializable.ser_positive_equivalence_proj_1157 := proj_3 384 env_1141 in
    let y_1158 := app ConCert.Execution.Serializable.deserialize_uncurried_known_173<150>(ConCert.Execution.Serializable.ser_positive_equivalence_proj_1157) in
    let y_code_1159 := proj_0 15 y_1158 in
    let y_env_1160 := proj_1 15 y_1158 in
    let y_1161 := app y_code_1159<3>(y_env_1160,v_1142) in
    let y_code_1162 := proj_0 15 y_1154 in
    let y_env_1163 := proj_1 15 y_1154 in
    let y_1164 := app y_code_1162<3>(y_env_1163,y_1161) in
    let y_proj_1165 := proj_0 384 env_1141 in
    let stdpp.countable.N_countable_proj_1166 := proj_1 384 env_1141 in
    let ConCert.Execution.OptionMonad.Monad_option_proj_1167 := proj_2 384 env_1141 in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1168 := proj_4 384 env_1141 in
    let env_1169 := con_397(y_proj_1165,stdpp.countable.N_countable_proj_1166,ConCert.Execution.OptionMonad.Monad_option_proj_1167,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1168) in
    let y_wrapper_clo_1170 := con_15(y_wrapper_208,env_1169) in
    let y_code_1171 := proj_0 15 y_1164 in
    let y_env_1172 := proj_1 15 y_1164 in
    y_code_1171<3>(y_env_1172,y_wrapper_clo_1170)
  fun y_known_205<53>(p_1174,y_1175,stdpp.countable.N_countable_1176,ConCert.Execution.OptionMonad.Monad_option_1177,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1178) :=
    let env_1181 := con_273(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1178,stdpp.countable.N_countable_1176) in
    let env_1182 := con_275(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1178,ConCert.Execution.OptionMonad.Monad_option_1177,stdpp.countable.N_countable_1176,y_1175) in
    let y_1183 := con_99() in
    let y_wrapper_clo_1184 := con_15(y_wrapper_160,env_1181) in
    let y_clo_1185 := con_15(y_161,env_1182) in
    let y_1186 := Build_Countable(y_wrapper_clo_1184,y_clo_1185,y_1183) in
    let y_1189 := app stdpp.countable.decode_uncurried_uncurried_known_158<143>(y_1186) in
    let y_code_1190 := proj_0 15 y_1189 in
    let y_env_1191 := proj_1 15 y_1189 in
    y_code_1190<3>(y_env_1191,p_1174)
  fun y_wrapper_206<3>(env_1192,y_1193) :=
    let x_proj_1195 := proj_0 391 env_1192 in
    ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_1193,x_proj_1195)
  fun y_wrapper_208<3>(env_1202,p_1203) :=
    let y_proj_1205 := proj_0 397 env_1202 in
    let stdpp.countable.N_countable_proj_1206 := proj_1 397 env_1202 in
    let ConCert.Execution.OptionMonad.Monad_option_proj_1207 := proj_2 397 env_1202 in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1208 := proj_3 397 env_1202 in
    y_known_205<53>(p_1203,y_proj_1205,stdpp.countable.N_countable_proj_1206,ConCert.Execution.OptionMonad.Monad_option_proj_1207,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1208)
  fun y_209<3>(env_1209,a_1210) :=
    let y_1211 := xH() in
    let y_1212 := xO(y_1211) in
    let y_1213 := Npos(y_1212) in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1215 := proj_1 399 env_1209 in
    let y_proj_1216 := proj_0 399 env_1209 in
    let y_1217 := app f_case_known_210<88>(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1215,y_proj_1216,y_1213) in
    let y_1219 := app f_case_known_212<156>(y_1217) in
    let y_1222 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<129>(a_1210) in
    let y_proj_1224 := proj_0 399 env_1209 in
    Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(y_1222,y_1219,y_proj_1224)
  fun f_case_known_210<88>(s_1226,y_1227,y_1228) :=
    case s_1226 of {
    | N0 =>
      let y_1229 := N0() in
      let y_1230 := N0() in
      let y_1231 := pair(y_1229,y_1230) in
      halt y_1231
    | Npos =>
      let na_1232 := proj_0 113 s_1226 in
      pos_div_eucl_uncurried_known_211<88>(y_1228,na_1232,y_1227)
    }
  fun pos_div_eucl_uncurried_known_211<88>(b_1235,a_1236,y_1237) :=
    case a_1236 of {
    | xI =>
      let a'_1238 := proj_0 142 a_1236 in
      let y_1239 := app pos_div_eucl_uncurried_known_211<88>(b_1235,a'_1238,y_1237) in
      case y_1239 of {
      | pair =>
        let q_1240 := proj_0 120 y_1239 in
        let r_1241 := proj_1 120 y_1239 in
        let r'_1243 := app Coq.NArith.BinNatDef.N.succ_double_known_182<152>(r_1241) in
        let y_1245 := app Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(r'_1243,b_1235,y_1237) in
        case y_1245 of {
        | true =>
          let y_1247 := app Coq.NArith.BinNatDef.N.succ_double_known_182<152>(q_1240) in
          let y_1249 := app Coq.NArith.BinNatDef.N.sub_uncurried_known_185<3>(b_1235,r'_1243) in
          let y_1250 := pair(y_1247,y_1249) in
          halt y_1250
        | false =>
          let y_1252 := app Coq.NArith.BinNatDef.N.double_known_188<155>(q_1240) in
          let y_1253 := pair(y_1252,r'_1243) in
          halt y_1253
        }
      }
    | xO =>
      let a'_1254 := proj_0 143 a_1236 in
      let y_1255 := app pos_div_eucl_uncurried_known_211<88>(b_1235,a'_1254,y_1237) in
      case y_1255 of {
      | pair =>
        let q_1256 := proj_0 120 y_1255 in
        let r_1257 := proj_1 120 y_1255 in
        let r'_1259 := app Coq.NArith.BinNatDef.N.double_known_188<155>(r_1257) in
        let y_1261 := app Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(r'_1259,b_1235,y_1237) in
        case y_1261 of {
        | true =>
          let y_1263 := app Coq.NArith.BinNatDef.N.succ_double_known_182<152>(q_1256) in
          let y_1265 := app Coq.NArith.BinNatDef.N.sub_uncurried_known_185<3>(b_1235,r'_1259) in
          let y_1266 := pair(y_1263,y_1265) in
          halt y_1266
        | false =>
          let y_1268 := app Coq.NArith.BinNatDef.N.double_known_188<155>(q_1256) in
          let y_1269 := pair(y_1268,r'_1259) in
          halt y_1269
        }
      }
    | xH =>
      case b_1235 of {
      | N0 =>
        let y_1270 := N0() in
        let y_1271 := xH() in
        let y_1272 := Npos(y_1271) in
        let y_1273 := pair(y_1270,y_1272) in
        halt y_1273
      | Npos =>
        let p_1274 := proj_0 113 b_1235 in
        case p_1274 of {
        | xI =>
          let y_1275 := N0() in
          let y_1276 := xH() in
          let y_1277 := Npos(y_1276) in
          let y_1278 := pair(y_1275,y_1277) in
          halt y_1278
        | xO =>
          let y_1279 := N0() in
          let y_1280 := xH() in
          let y_1281 := Npos(y_1280) in
          let y_1282 := pair(y_1279,y_1281) in
          halt y_1282
        | xH =>
          let y_1283 := xH() in
          let y_1284 := Npos(y_1283) in
          let y_1285 := N0() in
          let y_1286 := pair(y_1284,y_1285) in
          halt y_1286
        }
      }
    }
  fun f_case_known_212<156>(s_1288) :=
    case s_1288 of {
    | pair =>
      let x_1289 := proj_0 120 s_1288 in
      halt x_1289
    }
  fun Coq.ZArith.BinIntDef.Z.double_known_213<157>(x_1291) :=
    case x_1291 of {
    | Z0 =>
      let y_1292 := Z0() in
      halt y_1292
    | Zpos =>
      let p_1293 := proj_0 140 x_1291 in
      let y_1294 := xO(p_1293) in
      let y_1295 := Zpos(y_1294) in
      halt y_1295
    | Zneg =>
      let p_1296 := proj_0 141 x_1291 in
      let y_1297 := xO(p_1296) in
      let y_1298 := Zneg(y_1297) in
      halt y_1298
    }
  fun Coq.ZArith.BinIntDef.Z.double_wrapper_214<3>(env_1299,x_1300) :=
    Coq.ZArith.BinIntDef.Z.double_known_213<157>(x_1300)
  fun Coq.ZArith.BinIntDef.Z.succ_double_known_215<158>(x_1303) :=
    case x_1303 of {
    | Z0 =>
      let y_1304 := xH() in
      let y_1305 := Zpos(y_1304) in
      halt y_1305
    | Zpos =>
      let p_1306 := proj_0 140 x_1303 in
      let y_1307 := xI(p_1306) in
      let y_1308 := Zpos(y_1307) in
      halt y_1308
    | Zneg =>
      let p_1309 := proj_0 141 x_1303 in
      let y_1311 := app pred_double_known_142<138>(p_1309) in
      let y_1312 := Zneg(y_1311) in
      halt y_1312
    }
  fun Coq.ZArith.BinIntDef.Z.succ_double_wrapper_216<3>(env_1313,x_1314) :=
    Coq.ZArith.BinIntDef.Z.succ_double_known_215<158>(x_1314)
  fun pos_sub_uncurried_known_217<3>(y_1317,x_1318) :=
    case x_1318 of {
    | xI =>
      let p_1319 := proj_0 142 x_1318 in
      case y_1317 of {
      | xI =>
        let q_1320 := proj_0 142 y_1317 in
        let y_1321 := app pos_sub_uncurried_known_217<3>(q_1320,p_1319) in
        Coq.ZArith.BinIntDef.Z.double_known_213<157>(y_1321)
      | xO =>
        let q_1323 := proj_0 143 y_1317 in
        let y_1324 := app pos_sub_uncurried_known_217<3>(q_1323,p_1319) in
        Coq.ZArith.BinIntDef.Z.succ_double_known_215<158>(y_1324)
      | xH =>
        let y_1326 := xO(p_1319) in
        let y_1327 := Zpos(y_1326) in
        halt y_1327
      }
    | xO =>
      let p_1328 := proj_0 143 x_1318 in
      case y_1317 of {
      | xI =>
        let q_1329 := proj_0 142 y_1317 in
        let y_1330 := app pos_sub_uncurried_known_217<3>(q_1329,p_1328) in
        case y_1330 of {
        | Z0 =>
          let y_1331 := xH() in
          let y_1332 := Zneg(y_1331) in
          halt y_1332
        | Zpos =>
          let p_1333 := proj_0 140 y_1330 in
          let y_1335 := app pred_double_known_142<138>(p_1333) in
          let y_1336 := Zpos(y_1335) in
          halt y_1336
        | Zneg =>
          let p_1337 := proj_0 141 y_1330 in
          let y_1338 := xI(p_1337) in
          let y_1339 := Zneg(y_1338) in
          halt y_1339
        }
      | xO =>
        let q_1340 := proj_0 143 y_1317 in
        let y_1341 := app pos_sub_uncurried_known_217<3>(q_1340,p_1328) in
        Coq.ZArith.BinIntDef.Z.double_known_213<157>(y_1341)
      | xH =>
        let y_1344 := app pred_double_known_142<138>(p_1328) in
        let y_1345 := Zpos(y_1344) in
        halt y_1345
      }
    | xH =>
      case y_1317 of {
      | xI =>
        let q_1346 := proj_0 142 y_1317 in
        let y_1347 := xO(q_1346) in
        let y_1348 := Zneg(y_1347) in
        halt y_1348
      | xO =>
        let q_1349 := proj_0 143 y_1317 in
        let y_1351 := app pred_double_known_142<138>(q_1349) in
        let y_1352 := Zneg(y_1351) in
        halt y_1352
      | xH =>
        let y_1353 := Z0() in
        halt y_1353
      }
    }
  fun Coq.ZArith.BinIntDef.Z.add_uncurried_known_218<3>(y_1355,x_1356) :=
    case x_1356 of {
    | Z0 =>
      halt y_1355
    | Zpos =>
      let x'_1357 := proj_0 140 x_1356 in
      case y_1355 of {
      | Z0 =>
        halt x_1356
      | Zpos =>
        let y'_1358 := proj_0 140 y_1355 in
        let y_1360 := app add_uncurried_known_189<3>(y'_1358,x'_1357) in
        let y_1361 := Zpos(y_1360) in
        halt y_1361
      | Zneg =>
        let y'_1362 := proj_0 141 y_1355 in
        pos_sub_uncurried_known_217<3>(y'_1362,x'_1357)
      }
    | Zneg =>
      let x'_1364 := proj_0 141 x_1356 in
      case y_1355 of {
      | Z0 =>
        halt x_1356
      | Zpos =>
        let y'_1365 := proj_0 140 y_1355 in
        pos_sub_uncurried_known_217<3>(x'_1364,y'_1365)
      | Zneg =>
        let y'_1367 := proj_0 141 y_1355 in
        let y_1369 := app add_uncurried_known_189<3>(y'_1367,x'_1364) in
        let y_1370 := Zneg(y_1369) in
        halt y_1370
      }
    }
  fun ConCert.Examples.Counter.Counter.count_uncurried_known_219<159>(s_1372) :=
    case s_1372 of {
    | build_state =>
      let count_1374 := proj_0 100 s_1372 in
      halt count_1374
    }
  fun ConCert.Examples.Counter.Counter.owner_uncurried_known_220<160>(s_1376) :=
    case s_1376 of {
    | build_state =>
      let owner_1378 := proj_1 100 s_1376 in
      halt owner_1378
    }
  fun Coq.ZArith.BinIntDef.Z.opp_known_221<161>(x_1380) :=
    case x_1380 of {
    | Z0 =>
      let y_1381 := Z0() in
      halt y_1381
    | Zpos =>
      let x_1382 := proj_0 140 x_1380 in
      let y_1383 := Zneg(x_1382) in
      halt y_1383
    | Zneg =>
      let x_1384 := proj_0 141 x_1380 in
      let y_1385 := Zpos(x_1384) in
      halt y_1385
    }
  fun of_pos_rec_uncurried_known_222<3>(p_1387,n_1388) :=
    case n_1388 of {
    | O =>
      let y_1389 := prim: (int: 0) in
      halt y_1389
    | S =>
      let n_1390 := proj_0 135 n_1388 in
      case p_1387 of {
      | xI =>
        let p_1391 := proj_0 142 p_1387 in
        let y_1392 := app of_pos_rec_uncurried_known_222<3>(p_1391,n_1390) in
        let y_1393 := prim: (int: 1) in
        let prim_1394 := prim_104(y_1392,y_1393) in
        let y_1395 := prim: (int: 1) in
        let prim_1396 := prim_106(prim_1394,y_1395) in
        halt prim_1396
      | xO =>
        let p_1397 := proj_0 143 p_1387 in
        let y_1398 := app of_pos_rec_uncurried_known_222<3>(p_1397,n_1390) in
        let y_1399 := prim: (int: 1) in
        let prim_1400 := prim_104(y_1398,y_1399) in
        halt prim_1400
      | xH =>
        let y_1401 := prim: (int: 1) in
        halt y_1401
      }
    }
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_known_223<3>(s_1403,Coq.Numbers.Cyclic.Int63.Uint63.size_1404) :=
    case s_1403 of {
    | build_state =>
      let count_1405 := proj_0 100 s_1403 in
      case count_1405 of {
      | Z0 =>
        let y_1406 := prim: (int: 0) in
        halt y_1406
      | Zpos =>
        let p_1407 := proj_0 140 count_1405 in
        of_pos_rec_uncurried_known_222<3>(p_1407,Coq.Numbers.Cyclic.Int63.Uint63.size_1404)
      | Zneg =>
        let p_1409 := proj_0 141 count_1405 in
        let y_1411 := app of_pos_rec_uncurried_known_222<3>(p_1409,Coq.Numbers.Cyclic.Int63.Uint63.size_1404) in
        let y_1412 := prim: (int: 0) in
        let prim_1413 := prim_105(y_1412,y_1411) in
        halt prim_1413
      }
    }
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_224<3>(env_1414,s_1415) :=
    let Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1417 := proj_0 442 env_1414 in
    ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_known_223<3>(s_1415,Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1417)
  fun to_Z_rec_uncurried_known_225<3>(i_1419,n_1420) :=
    case n_1420 of {
    | O =>
      let y_1421 := Z0() in
      halt y_1421
    | S =>
      let n_1422 := proj_0 135 n_1420 in
      let y_1424 := prim: (int: 1) in
      let prim_1425 := prim_102(i_1419,y_1424) in
      let y_1426 := prim: (int: 0) in
      let prim_1427 := prim_101(prim_1425,y_1426) in
      let y_1428 := app f_case_known_226<162>(prim_1427) in
      let y_1429 := prim: (int: 1) in
      let prim_1430 := prim_103(i_1419,y_1429) in
      let y_1431 := app to_Z_rec_uncurried_known_225<3>(prim_1430,n_1422) in
      let y_code_1432 := proj_0 15 y_1428 in
      let y_env_1433 := proj_1 15 y_1428 in
      y_code_1432<3>(y_env_1433,y_1431)
    }
  fun f_case_known_226<162>(s_1435) :=
    case s_1435 of {
    | true =>
      let Coq.ZArith.BinIntDef.Z.double_wrapperbogus_env_1436 := con_446() in
      let Coq.ZArith.BinIntDef.Z.double_wrapper_clo_1437 := con_15(Coq.ZArith.BinIntDef.Z.double_wrapper_214,Coq.ZArith.BinIntDef.Z.double_wrapperbogus_env_1436) in
      halt Coq.ZArith.BinIntDef.Z.double_wrapper_clo_1437
    | false =>
      let Coq.ZArith.BinIntDef.Z.succ_double_wrapperbogus_env_1438 := con_447() in
      let Coq.ZArith.BinIntDef.Z.succ_double_wrapper_clo_1439 := con_15(Coq.ZArith.BinIntDef.Z.succ_double_wrapper_216,Coq.ZArith.BinIntDef.Z.succ_double_wrapperbogus_env_1438) in
      halt Coq.ZArith.BinIntDef.Z.succ_double_wrapper_clo_1439
    }
  fun y_wrapper_227<3>(env_1440,i_1441) :=
    let Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1442 := proj_0 450 env_1440 in
    to_Z_rec_uncurried_known_225<3>(i_1441,Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1442)
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_known_228<88>(p_1445,y_1446,Coq.Numbers.Cyclic.Int63.Uint63.size_1447) :=
    let z_1449 := app to_Z_rec_uncurried_known_225<3>(p_1445,Coq.Numbers.Cyclic.Int63.Uint63.size_1447) in
    let y_1450 := Z0() in
    let y_1452 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(y_1450,z_1449,y_1446) in
    case y_1452 of {
    | true =>
      let y_1454 := app Coq.ZArith.BinIntDef.Z.opp_known_221<161>(z_1449) in
      let y_1455 := Dec(y_1454) in
      let y_1456 := Some(y_1455) in
      halt y_1456
    | false =>
      let y_1457 := Inc(z_1449) in
      let y_1458 := Some(y_1457) in
      halt y_1458
    }
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_wrapper_229<3>(env_1459,p_1460) :=
    let y_proj_1462 := proj_0 456 env_1459 in
    let Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1463 := proj_1 456 env_1459 in
    ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_known_228<88>(p_1460,y_proj_1462,Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1463)
  fun y_wrapper_230<3>(env_1464,init_value_1465) :=
    let ctx_proj_1466 := proj_0 462 env_1464 in
    let y_1468 := app f_case_known_232<163>(ctx_proj_1466) in
    let y_1469 := build_state(init_value_1465,y_1468) in
    let y_1470 := Ok(y_1469) in
    halt y_1470
  fun y_wrapper_231<3>(env_1471,ctx_1472) :=
    let chain_proj_1473 := proj_0 464 env_1471 in
    let env_1474 := con_462(ctx_1472,chain_proj_1473) in
    let y_wrapper_clo_1475 := con_15(y_wrapper_230,env_1474) in
    halt y_wrapper_clo_1475
  fun f_case_known_232<163>(s_1477) :=
    case s_1477 of {
    | build_ctx =>
      let ctx_from_1478 := proj_1 114 s_1477 in
      halt ctx_from_1478
    }
  fun y_wrapper_233<3>(env_1479,chain_1480) :=
    let env_1481 := con_464(chain_1480) in
    let y_wrapper_clo_1482 := con_15(y_wrapper_231,env_1481) in
    halt y_wrapper_clo_1482
  fun y_234<3>(env_1483,msg_1484) :=
    let state_proj_1486 := proj_0 472 env_1483 in
    let y_proj_1489 := proj_5 472 env_1483 in
    let y_proj_1490 := proj_4 472 env_1483 in
    let ConCert.Examples.Counter.Counter.default_error_proj_1491 := proj_3 472 env_1483 in
    y_uncurried_uncurried_uncurried_known_237<53>(msg_1484,state_proj_1486,y_proj_1489,y_proj_1490,ConCert.Examples.Counter.Counter.default_error_proj_1491)
  fun y_wrapper_235<3>(env_1492,state_1493) :=
    let y_proj_1494 := proj_4 474 env_1492 in
    let y_proj_1495 := proj_3 474 env_1492 in
    let ConCert.Examples.Counter.Counter.default_error_proj_1496 := proj_2 474 env_1492 in
    let chain_proj_1497 := proj_1 474 env_1492 in
    let ctx_proj_1498 := proj_0 474 env_1492 in
    let env_1499 := con_472(state_1493,ctx_proj_1498,chain_proj_1497,ConCert.Examples.Counter.Counter.default_error_proj_1496,y_proj_1495,y_proj_1494) in
    let y_clo_1500 := con_15(y_234,env_1499) in
    halt y_clo_1500
  fun y_wrapper_236<3>(env_1501,ctx_1502) :=
    let y_proj_1503 := proj_3 476 env_1501 in
    let y_proj_1504 := proj_2 476 env_1501 in
    let ConCert.Examples.Counter.Counter.default_error_proj_1505 := proj_1 476 env_1501 in
    let chain_proj_1506 := proj_0 476 env_1501 in
    let env_1507 := con_474(ctx_1502,chain_proj_1506,ConCert.Examples.Counter.Counter.default_error_proj_1505,y_proj_1504,y_proj_1503) in
    let y_wrapper_clo_1508 := con_15(y_wrapper_235,env_1507) in
    halt y_wrapper_clo_1508
  fun y_uncurried_uncurried_uncurried_known_237<53>(msg_1510,state_1511,y_1514,y_1515,ConCert.Examples.Counter.Counter.default_error_1516) :=
    case msg_1510 of {
    | Some =>
      let m_1517 := proj_0 145 msg_1510 in
      let env_1518 := con_478(state_1511,ConCert.Examples.Counter.Counter.default_error_1516,y_1515,y_1514) in
      let y_1519 := app f_case_238<3>(env_1518,m_1517) in
      case y_1519 of {
      | Ok =>
        let res_1520 := proj_0 101 y_1519 in
        let y_1521 := nil() in
        let y_1522 := pair(res_1520,y_1521) in
        let y_1523 := Ok(y_1522) in
        halt y_1523
      | Err =>
        let e_1524 := proj_0 102 y_1519 in
        let y_1525 := Err(e_1524) in
        halt y_1525
      }
    | None =>
      let y_1526 := Err(ConCert.Examples.Counter.Counter.default_error_1516) in
      halt y_1526
    }
  fun f_case_238<3>(env_1527,s_1528) :=
    case s_1528 of {
    | Inc =>
      let i_1529 := proj_0 137 s_1528 in
      let y_1530 := Z0() in
      let y_proj_1532 := proj_3 478 env_1527 in
      let y_1533 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(i_1529,y_1530,y_proj_1532) in
      case y_1533 of {
      | true =>
        let state_proj_1535 := proj_0 478 env_1527 in
        let y_1537 := app ConCert.Examples.Counter.Counter.count_uncurried_known_219<159>(state_proj_1535) in
        let y_1539 := app Coq.ZArith.BinIntDef.Z.add_uncurried_known_218<3>(i_1529,y_1537) in
        let state_proj_1541 := proj_0 478 env_1527 in
        let y_1543 := app ConCert.Examples.Counter.Counter.owner_uncurried_known_220<160>(state_proj_1541) in
        let y_1544 := build_state(y_1539,y_1543) in
        let y_1545 := Ok(y_1544) in
        halt y_1545
      | false =>
        let ConCert.Examples.Counter.Counter.default_error_proj_1546 := proj_1 478 env_1527 in
        let y_1547 := Err(ConCert.Examples.Counter.Counter.default_error_proj_1546) in
        halt y_1547
      }
    | Dec =>
      let i_1548 := proj_0 138 s_1528 in
      let y_1549 := Z0() in
      let y_proj_1551 := proj_3 478 env_1527 in
      let y_1552 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(i_1548,y_1549,y_proj_1551) in
      case y_1552 of {
      | true =>
        let state_proj_1554 := proj_0 478 env_1527 in
        let y_1556 := app ConCert.Examples.Counter.Counter.count_uncurried_known_219<159>(state_proj_1554) in
        let y_1558 := app Coq.ZArith.BinIntDef.Z.opp_known_221<161>(i_1548) in
        let y_1560 := app Coq.ZArith.BinIntDef.Z.add_uncurried_known_218<3>(y_1558,y_1556) in
        let state_proj_1562 := proj_0 478 env_1527 in
        let y_1564 := app ConCert.Examples.Counter.Counter.owner_uncurried_known_220<160>(state_proj_1562) in
        let y_1565 := build_state(y_1560,y_1564) in
        let y_1566 := Ok(y_1565) in
        halt y_1566
      | false =>
        let ConCert.Examples.Counter.Counter.default_error_proj_1567 := proj_1 478 env_1527 in
        let y_1568 := Err(ConCert.Examples.Counter.Counter.default_error_proj_1567) in
        halt y_1568
      }
    }
  fun y_wrapper_239<3>(env_1569,chain_1570) :=
    let y_proj_1571 := proj_0 488 env_1569 in
    let y_proj_1572 := proj_1 488 env_1569 in
    let ConCert.Examples.Counter.Counter.default_error_proj_1573 := proj_2 488 env_1569 in
    let env_1574 := con_476(chain_1570,ConCert.Examples.Counter.Counter.default_error_proj_1573,y_proj_1572,y_proj_1571) in
    let y_wrapper_clo_1575 := con_15(y_wrapper_236,env_1574) in
    halt y_wrapper_clo_1575
  fun y_wrapper_240<3>(env_1576,p_1577) :=
    let Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1578 := proj_0 492 env_1576 in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_proj_1579 := proj_1 492 env_1576 in
    let y_1581 := app to_Z_rec_uncurried_known_225<3>(p_1577,Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1578) in
    let y_1582 := build_state(y_1581,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_proj_1579) in
    halt y_1582
] in
let y_1583 := Eq() in
let env_1584 := con_239() in
let env_1585 := con_245() in
let y_1586 := con_99() in
let y_wrapper_clo_1587 := con_15(y_wrapper_146,env_1584) in
let y_wrapper_clo_1588 := con_15(y_wrapper_149,env_1585) in
let stdpp.countable.N_countable_1589 := Build_Countable(y_wrapper_clo_1587,y_wrapper_clo_1588,y_1586) in
let env_1590 := con_252() in
let env_1591 := con_265() in
let y_wrapper_clo_1592 := con_15(y_wrapper_152,env_1590) in
let y_wrapper_clo_1593 := con_15(y_wrapper_157,env_1591) in
let ConCert.Execution.OptionMonad.Monad_option_1594 := build_monad(y_wrapper_clo_1592,y_wrapper_clo_1593) in
let env_1595 := con_286() in
let y_1596 := ser_int() in
let env_1597 := con_288(y_1596) in
let y_1598 := con_99() in
let y_wrapper_clo_1599 := con_15(y_wrapper_166,env_1595) in
let y_clo_1600 := con_15(y_167,env_1597) in
let ConCert.Execution.Serializable.int_serializable_1601 := build_serializable(y_wrapper_clo_1599,y_clo_1600,y_1598) in
let env_1602 := con_301(ConCert.Execution.Serializable.int_serializable_1601) in
let env_1603 := con_303(y_1583,ConCert.Execution.OptionMonad.Monad_option_1594,ConCert.Execution.Serializable.int_serializable_1601) in
let y_1604 := con_99() in
let y_wrapper_clo_1605 := con_15(y_wrapper_176,env_1602) in
let y_clo_1606 := con_15(y_177,env_1603) in
let ConCert.Execution.Serializable.ser_positive_equivalence_1607 := build_serializable(y_wrapper_clo_1605,y_clo_1606,y_1604) in
let y_1608 := xH() in
let y_1609 := xO(y_1608) in
let y_1610 := xH() in
let y_1611 := xO(y_1610) in
let y_1612 := xO(y_1611) in
let y_1613 := xO(y_1612) in
let y_1614 := Npos(y_1613) in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1616 := app f_case_known_191<3>(y_1614,y_1609) in
let y_1617 := con_99() in
let env_1618 := con_355(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1616) in
let env_1619 := con_362(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1616) in
let env_1620 := con_369(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1616) in
let env_1621 := con_273(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1616,stdpp.countable.N_countable_1589) in
let env_1622 := con_275(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1616,ConCert.Execution.OptionMonad.Monad_option_1594,stdpp.countable.N_countable_1589,y_1583) in
let y_1623 := con_99() in
let y_wrapper_clo_1624 := con_15(y_wrapper_160,env_1621) in
let y_clo_1625 := con_15(y_161,env_1622) in
let y_1626 := Build_Countable(y_wrapper_clo_1624,y_clo_1625,y_1623) in
let env_1627 := con_382(y_1583,stdpp.countable.N_countable_1589,ConCert.Execution.OptionMonad.Monad_option_1594,ConCert.Execution.Serializable.ser_positive_equivalence_1607,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1616) in
let env_1628 := con_384(y_1583,stdpp.countable.N_countable_1589,ConCert.Execution.OptionMonad.Monad_option_1594,ConCert.Execution.Serializable.ser_positive_equivalence_1607,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1616) in
let y_1629 := con_99() in
let y_wrapper_clo_1630 := con_15(y_wrapper_203,env_1627) in
let y_clo_1631 := con_15(y_204,env_1628) in
let y_1632 := build_serializable(y_wrapper_clo_1630,y_clo_1631,y_1629) in
let env_1633 := con_399(y_1583,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1616) in
let y_wrapper_clo_1634 := con_15(y_wrapper_195,env_1618) in
let y_wrapper_clo_1635 := con_15(y_wrapper_197,env_1619) in
let y_wrapper_clo_1636 := con_15(y_wrapper_199,env_1620) in
let y_clo_1637 := con_15(y_209,env_1633) in
let y_1638 := build_chain_base(y_1617,y_wrapper_clo_1634,y_wrapper_clo_1635,y_wrapper_clo_1636,y_1626,y_1632,y_clo_1637) in
let y_1639 := O() in
let ConCert.Examples.Counter.Counter.default_error_1640 := S(y_1639) in
let y_1641 := O() in
let y_1642 := S(y_1641) in
let y_1643 := S(y_1642) in
let y_1644 := S(y_1643) in
let y_1645 := S(y_1644) in
let y_1646 := S(y_1645) in
let y_1647 := S(y_1646) in
let y_1648 := S(y_1647) in
let y_1649 := S(y_1648) in
let y_1650 := S(y_1649) in
let y_1651 := S(y_1650) in
let y_1652 := S(y_1651) in
let y_1653 := S(y_1652) in
let y_1654 := S(y_1653) in
let y_1655 := S(y_1654) in
let y_1656 := S(y_1655) in
let y_1657 := S(y_1656) in
let y_1658 := S(y_1657) in
let y_1659 := S(y_1658) in
let y_1660 := S(y_1659) in
let y_1661 := S(y_1660) in
let y_1662 := S(y_1661) in
let y_1663 := S(y_1662) in
let y_1664 := S(y_1663) in
let y_1665 := S(y_1664) in
let y_1666 := S(y_1665) in
let y_1667 := S(y_1666) in
let y_1668 := S(y_1667) in
let y_1669 := S(y_1668) in
let y_1670 := S(y_1669) in
let y_1671 := S(y_1670) in
let y_1672 := S(y_1671) in
let y_1673 := S(y_1672) in
let y_1674 := S(y_1673) in
let y_1675 := S(y_1674) in
let y_1676 := S(y_1675) in
let y_1677 := S(y_1676) in
let y_1678 := S(y_1677) in
let y_1679 := S(y_1678) in
let y_1680 := S(y_1679) in
let y_1681 := S(y_1680) in
let y_1682 := S(y_1681) in
let y_1683 := S(y_1682) in
let y_1684 := S(y_1683) in
let y_1685 := S(y_1684) in
let y_1686 := S(y_1685) in
let y_1687 := S(y_1686) in
let y_1688 := S(y_1687) in
let y_1689 := S(y_1688) in
let y_1690 := S(y_1689) in
let y_1691 := S(y_1690) in
let y_1692 := S(y_1691) in
let y_1693 := S(y_1692) in
let y_1694 := S(y_1693) in
let y_1695 := S(y_1694) in
let y_1696 := S(y_1695) in
let y_1697 := S(y_1696) in
let y_1698 := S(y_1697) in
let y_1699 := S(y_1698) in
let y_1700 := S(y_1699) in
let y_1701 := S(y_1700) in
let y_1702 := S(y_1701) in
let y_1703 := S(y_1702) in
let Coq.Numbers.Cyclic.Int63.Uint63.size_1704 := S(y_1703) in
let env_1705 := con_442(Coq.Numbers.Cyclic.Int63.Uint63.size_1704) in
let env_1706 := con_450(Coq.Numbers.Cyclic.Int63.Uint63.size_1704) in
let y_1707 := N0() in
let y_1708 := con_99() in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_1709 := bounded(y_1707,y_1708) in
let env_1710 := con_456(y_1583,Coq.Numbers.Cyclic.Int63.Uint63.size_1704) in
let env_1711 := con_467() in
let env_1712 := con_488(y_1583,y_1638,ConCert.Examples.Counter.Counter.default_error_1640) in
let env_1713 := con_492(Coq.Numbers.Cyclic.Int63.Uint63.size_1704,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_1709) in
let y_wrapper_clo_1714 := con_15(y_wrapper_233,env_1711) in
let y_wrapper_clo_1715 := con_15(y_wrapper_239,env_1712) in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_clo_1716 := con_15(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_224,env_1705) in
let y_wrapper_clo_1717 := con_15(y_wrapper_240,env_1713) in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_wrapper_clo_1718 := con_15(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_wrapper_229,env_1710) in
let y_wrapper_clo_1719 := con_15(y_wrapper_227,env_1706) in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.COUNTER_MODULE_1720 := Build_ConcordiumWasmMod(y_wrapper_clo_1714,y_wrapper_clo_1715,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_clo_1716,y_wrapper_clo_1717,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_wrapper_clo_1718,y_wrapper_clo_1719) in
halt ConCert.Examples.Counter.extraction.CounterConcordiumWasm.COUNTER_MODULE_1720
