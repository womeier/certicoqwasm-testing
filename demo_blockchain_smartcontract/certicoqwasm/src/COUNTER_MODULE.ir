
letrec [
  fun compare_cont_uncurried_uncurried_known_108<88>(y_241,x_242,r_243) :=
    case x_242 of {
    | xI =>
      let p_244 := proj_0 142 x_242 in
      case y_241 of {
      | xI =>
        let q_245 := proj_0 142 y_241 in
        compare_cont_uncurried_uncurried_known_108<88>(q_245,p_244,r_243)
      | xO =>
        let q_246 := proj_0 143 y_241 in
        let y_247 := Gt() in
        compare_cont_uncurried_uncurried_known_108<88>(q_246,p_244,y_247)
      | xH =>
        let y_248 := Gt() in
        halt y_248
      }
    | xO =>
      let p_249 := proj_0 143 x_242 in
      case y_241 of {
      | xI =>
        let q_250 := proj_0 142 y_241 in
        let y_251 := Lt() in
        compare_cont_uncurried_uncurried_known_108<88>(q_250,p_249,y_251)
      | xO =>
        let q_252 := proj_0 143 y_241 in
        compare_cont_uncurried_uncurried_known_108<88>(q_252,p_249,r_243)
      | xH =>
        let y_253 := Gt() in
        halt y_253
      }
    | xH =>
      case y_241 of {
      | xI =>
        let y_254 := Lt() in
        halt y_254
      | xO =>
        let y_255 := Lt() in
        halt y_255
      | xH =>
        halt r_243
      }
    }
  fun Coq.NArith.BinNatDef.N.compare_uncurried_known_109<88>(m_257,n_258,y_259) :=
    case n_258 of {
    | N0 =>
      case m_257 of {
      | N0 =>
        let y_260 := Eq() in
        halt y_260
      | Npos =>
        let y_261 := Lt() in
        halt y_261
      }
    | Npos =>
      let n'_262 := proj_0 113 n_258 in
      case m_257 of {
      | N0 =>
        let y_263 := Gt() in
        halt y_263
      | Npos =>
        let m'_264 := proj_0 113 m_257 in
        compare_cont_uncurried_uncurried_known_108<88>(m'_264,n'_262,y_259)
      }
    }
  fun Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(m_267,n_268) :=
    case n_268 of {
    | N0 =>
      case m_267 of {
      | N0 =>
        let y_269 := true() in
        halt y_269
      | Npos =>
        let y_270 := false() in
        halt y_270
      }
    | Npos =>
      let p_271 := proj_0 113 n_268 in
      case m_267 of {
      | N0 =>
        let y_272 := false() in
        halt y_272
      | Npos =>
        let q_273 := proj_0 113 m_267 in
        eqb_uncurried_known_111<3>(q_273,p_271)
      }
    }
  fun eqb_uncurried_known_111<3>(q_276,p_277) :=
    case p_277 of {
    | xI =>
      let p_278 := proj_0 142 p_277 in
      case q_276 of {
      | xI =>
        let q_279 := proj_0 142 q_276 in
        eqb_uncurried_known_111<3>(q_279,p_278)
      | xO =>
        let y_280 := false() in
        halt y_280
      | xH =>
        let y_281 := false() in
        halt y_281
      }
    | xO =>
      let p_282 := proj_0 143 p_277 in
      case q_276 of {
      | xI =>
        let y_283 := false() in
        halt y_283
      | xO =>
        let q_284 := proj_0 143 q_276 in
        eqb_uncurried_known_111<3>(q_284,p_282)
      | xH =>
        let y_285 := false() in
        halt y_285
      }
    | xH =>
      case q_276 of {
      | xI =>
        let y_286 := false() in
        halt y_286
      | xO =>
        let y_287 := false() in
        halt y_287
      | xH =>
        let y_288 := true() in
        halt y_288
      }
    }
  fun ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(n_290) :=
    case n_290 of {
    | bounded =>
      let val_292 := proj_0 108 n_290 in
      halt val_292
    }
  fun ConCert.Execution.BoundedN.BoundedN.eqb_spec_uncurried_uncurried_known_113<3>(b_294,a_295) :=
    let y_298 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(a_295) in
    let y_300 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(b_294) in
    let y_302 := app Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_300,y_298) in
    let y_304 := app f_case_known_114<129>(y_302) in
    let y_305 := con_99() in
    let y_code_306 := proj_0 15 y_304 in
    let y_env_307 := proj_1 15 y_304 in
    let r_308 := app y_code_306<3>(y_env_307,y_305) in
    let y_310 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(a_295) in
    let y_312 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(b_294) in
    let b0_314 := app Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_312,y_310) in
    let y_316 := app f_case_known_117<130>(r_308) in
    halt y_316
  fun f_case_known_114<129>(s_318) :=
    case s_318 of {
    | true =>
      let env_319 := con_160() in
      let y_wrapper_clo_320 := con_15(y_wrapper_115,env_319) in
      halt y_wrapper_clo_320
    | false =>
      let env_321 := con_163() in
      let y_wrapper_clo_322 := con_15(y_wrapper_116,env_321) in
      halt y_wrapper_clo_322
    }
  fun y_wrapper_115<3>(env_323,H_324) :=
    let y_325 := con_99() in
    let y_326 := ReflectT(y_325) in
    halt y_326
  fun y_wrapper_116<3>(env_327,H_328) :=
    let y_329 := con_99() in
    let y_330 := ReflectF(y_329) in
    halt y_330
  fun f_case_known_117<130>(s_332) :=
    case s_332 of {
    | ReflectT =>
      let y_333 := con_99() in
      let y_334 := ReflectT(y_333) in
      halt y_334
    | ReflectF =>
      let y_335 := con_99() in
      let y_336 := ReflectF(y_335) in
      halt y_336
    }
  fun ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_338,x_339) :=
    let r_342 := app ConCert.Execution.BoundedN.BoundedN.eqb_spec_uncurried_uncurried_known_113<3>(y_338,x_339) in
    let y_344 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(x_339) in
    let y_346 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(y_338) in
    let b_348 := app Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_346,y_344) in
    case r_342 of {
    | ReflectT =>
      let y_349 := con_99() in
      let y_350 := left(y_349) in
      halt y_350
    | ReflectF =>
      let y_351 := con_99() in
      let y_352 := right(y_351) in
      halt y_352
    }
  fun stdpp.countable.encode_uncurried_uncurried_known_119<131>(Countable_354) :=
    case Countable_354 of {
    | Build_Countable =>
      let encode_357 := proj_0 126 Countable_354 in
      halt encode_357
    }
  fun Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(s_359,f0_360,f_361) :=
    case s_359 of {
    | left =>
      let y_365 := con_99() in
      let f_code_366 := proj_0 15 f_361 in
      let f_env_367 := proj_1 15 f_361 in
      f_code_366<3>(f_env_367,y_365)
    | right =>
      let y_368 := con_99() in
      let f0_code_369 := proj_0 15 f0_360 in
      let f0_env_370 := proj_1 15 f0_360 in
      f0_code_369<3>(f0_env_370,y_368)
    }
  fun y_known_121<132>(x0_372) :=
    case x0_372 of {
    | xI =>
      let y_373 := con_99() in
      let y_374 := right(y_373) in
      halt y_374
    | xO =>
      let y_375 := con_99() in
      let y_376 := right(y_375) in
      halt y_376
    | xH =>
      let y_377 := con_99() in
      let y_378 := left(y_377) in
      halt y_378
    }
  fun y_wrapper_122<3>(env_379,x0_380) :=
    y_known_121<132>(x0_380)
  fun F_known_123<133>(p_383) :=
    case p_383 of {
    | xI =>
      let p_384 := proj_0 142 p_383 in
      let y_385 := app F_known_123<133>(p_384) in
      let env_386 := con_189(y_385) in
      let y_wrapper_clo_387 := con_15(y_wrapper_127,env_386) in
      halt y_wrapper_clo_387
    | xO =>
      let p_388 := proj_0 143 p_383 in
      let y_389 := app F_known_123<133>(p_388) in
      let env_390 := con_199(y_389) in
      let y_wrapper_clo_391 := con_15(y_wrapper_131,env_390) in
      halt y_wrapper_clo_391
    | xH =>
      let y_wrapperbogus_env_392 := con_201() in
      let y_wrapper_clo_393 := con_15(y_wrapper_122,y_wrapperbogus_env_392) in
      halt y_wrapper_clo_393
    }
  fun y_known_124<3>(x0_395,y_396) :=
    case x0_395 of {
    | xI =>
      let p_397 := proj_0 142 x0_395 in
      let env_401 := con_183() in
      let env_402 := con_186() in
      let y_code_403 := proj_0 15 y_396 in
      let y_env_404 := proj_1 15 y_396 in
      let y_405 := app y_code_403<3>(y_env_404,p_397) in
      let y_wrapper_clo_407 := con_15(y_wrapper_126,env_402) in
      let y_wrapper_clo_408 := con_15(y_wrapper_125,env_401) in
      Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(y_405,y_wrapper_clo_407,y_wrapper_clo_408)
    | xO =>
      let y_409 := con_99() in
      let y_410 := right(y_409) in
      halt y_410
    | xH =>
      let y_411 := con_99() in
      let y_412 := right(y_411) in
      halt y_412
    }
  fun y_wrapper_125<3>(env_413,a_414) :=
    let y_415 := con_99() in
    let y_416 := left(y_415) in
    halt y_416
  fun y_wrapper_126<3>(env_417,diseq_418) :=
    let y_419 := con_99() in
    let y_420 := right(y_419) in
    halt y_420
  fun y_wrapper_127<3>(env_421,x0_422) :=
    let y_proj_424 := proj_0 189 env_421 in
    y_known_124<3>(x0_422,y_proj_424)
  fun y_known_128<3>(x0_426,y_427) :=
    case x0_426 of {
    | xI =>
      let y_428 := con_99() in
      let y_429 := right(y_428) in
      halt y_429
    | xO =>
      let p_430 := proj_0 143 x0_426 in
      let env_434 := con_193() in
      let env_435 := con_196() in
      let y_code_436 := proj_0 15 y_427 in
      let y_env_437 := proj_1 15 y_427 in
      let y_438 := app y_code_436<3>(y_env_437,p_430) in
      let y_wrapper_clo_440 := con_15(y_wrapper_130,env_435) in
      let y_wrapper_clo_441 := con_15(y_wrapper_129,env_434) in
      Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(y_438,y_wrapper_clo_440,y_wrapper_clo_441)
    | xH =>
      let y_442 := con_99() in
      let y_443 := right(y_442) in
      halt y_443
    }
  fun y_wrapper_129<3>(env_444,a_445) :=
    let y_446 := con_99() in
    let y_447 := left(y_446) in
    halt y_447
  fun y_wrapper_130<3>(env_448,diseq_449) :=
    let y_450 := con_99() in
    let y_451 := right(y_450) in
    halt y_451
  fun y_wrapper_131<3>(env_452,x0_453) :=
    let y_proj_455 := proj_0 199 env_452 in
    y_known_128<3>(x0_453,y_proj_455)
  fun y_wrapper_132<3>(env_456,m_457) :=
    let n_proj_458 := proj_0 205 env_456 in
    let y_460 := app f_case_known_135<135>(n_proj_458) in
    let y_code_461 := proj_0 15 y_460 in
    let y_env_462 := proj_1 15 y_460 in
    y_code_461<3>(y_env_462,m_457)
  fun y_known_133<134>(x_464) :=
    case x_464 of {
    | N0 =>
      let y_465 := con_99() in
      let y_466 := left(y_465) in
      halt y_466
    | Npos =>
      let y_467 := con_99() in
      let y_468 := right(y_467) in
      halt y_468
    }
  fun y_wrapper_134<3>(env_469,x_470) :=
    y_known_133<134>(x_470)
  fun f_case_known_135<135>(s_473) :=
    case s_473 of {
    | N0 =>
      let y_wrapperbogus_env_474 := con_211() in
      let y_wrapper_clo_475 := con_15(y_wrapper_134,y_wrapperbogus_env_474) in
      halt y_wrapper_clo_475
    | Npos =>
      let p_476 := proj_0 113 s_473 in
      let env_477 := con_221(p_476) in
      let y_wrapper_clo_478 := con_15(y_wrapper_139,env_477) in
      halt y_wrapper_clo_478
    }
  fun y_known_136<3>(x_480,p_481) :=
    case x_480 of {
    | N0 =>
      let y_482 := con_99() in
      let y_483 := right(y_482) in
      halt y_483
    | Npos =>
      let p_484 := proj_0 113 x_480 in
      let env_488 := con_214() in
      let env_489 := con_217() in
      let y_491 := app F_known_123<133>(p_481) in
      let y_code_492 := proj_0 15 y_491 in
      let y_env_493 := proj_1 15 y_491 in
      let y_494 := app y_code_492<3>(y_env_493,p_484) in
      let y_wrapper_clo_496 := con_15(y_wrapper_138,env_489) in
      let y_wrapper_clo_497 := con_15(y_wrapper_137,env_488) in
      Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(y_494,y_wrapper_clo_496,y_wrapper_clo_497)
    }
  fun y_wrapper_137<3>(env_498,a_499) :=
    let y_500 := con_99() in
    let y_501 := left(y_500) in
    halt y_501
  fun y_wrapper_138<3>(env_502,diseq_503) :=
    let y_504 := con_99() in
    let y_505 := right(y_504) in
    halt y_505
  fun y_wrapper_139<3>(env_506,x_507) :=
    let p_proj_509 := proj_0 221 env_506 in
    y_known_136<3>(x_507,p_proj_509)
  fun Coq.NArith.BinNat.N.eq_dec_wrapper_140<3>(env_510,n_511) :=
    let env_512 := con_205(n_511) in
    let y_wrapper_clo_513 := con_15(y_wrapper_132,env_512) in
    halt y_wrapper_clo_513
  fun succ_known_141<136>(x_515) :=
    case x_515 of {
    | xI =>
      let p_516 := proj_0 142 x_515 in
      let y_517 := app succ_known_141<136>(p_516) in
      let y_518 := xO(y_517) in
      halt y_518
    | xO =>
      let p_519 := proj_0 143 x_515 in
      let y_520 := xI(p_519) in
      halt y_520
    | xH =>
      let y_521 := xH() in
      let y_522 := xO(y_521) in
      halt y_522
    }
  fun pred_double_known_142<137>(x_524) :=
    case x_524 of {
    | xI =>
      let p_525 := proj_0 142 x_524 in
      let y_526 := xO(p_525) in
      let y_527 := xI(y_526) in
      halt y_527
    | xO =>
      let p_528 := proj_0 143 x_524 in
      let y_529 := app pred_double_known_142<137>(p_528) in
      let y_530 := xI(y_529) in
      halt y_530
    | xH =>
      let y_531 := xH() in
      halt y_531
    }
  fun program_branch_0_wrapper_143<3>(env_532,Heq_x_533) :=
    let y_534 := xH() in
    halt y_534
  fun f_case_known_144<138>(s_536) :=
    case s_536 of {
    | N0 =>
      let program_branch_0_wrapperbogus_env_537 := con_234() in
      let program_branch_0_wrapper_clo_538 := con_15(program_branch_0_wrapper_143,program_branch_0_wrapperbogus_env_537) in
      halt program_branch_0_wrapper_clo_538
    | Npos =>
      let p_539 := proj_0 113 s_536 in
      let env_540 := con_237(p_539) in
      let y_wrapper_clo_541 := con_15(y_wrapper_145,env_540) in
      halt y_wrapper_clo_541
    }
  fun y_wrapper_145<3>(env_542,Heq_x_543) :=
    let p_proj_544 := proj_0 237 env_542 in
    succ_known_141<136>(p_proj_544)
  fun y_wrapper_146<3>(env_546,x_547) :=
    let y_549 := app f_case_known_144<138>(x_547) in
    let y_550 := con_99() in
    let y_code_551 := proj_0 15 y_549 in
    let y_env_552 := proj_1 15 y_549 in
    y_code_551<3>(y_env_552,y_550)
  fun y_known_147<139>(p_554) :=
    let y_555 := xH() in
    let y_557 := app F_known_123<133>(p_554) in
    let y_code_558 := proj_0 15 y_557 in
    let y_env_559 := proj_1 15 y_557 in
    let y_560 := app y_code_558<3>(y_env_559,y_555) in
    case y_560 of {
    | left =>
      let y_561 := N0() in
      let y_562 := Some(y_561) in
      halt y_562
    | right =>
      let y_564 := app f_case_known_148<140>(p_554) in
      let y_565 := Npos(y_564) in
      let y_566 := Some(y_565) in
      halt y_566
    }
  fun f_case_known_148<140>(s_568) :=
    case s_568 of {
    | xI =>
      let p_569 := proj_0 142 s_568 in
      let y_570 := xO(p_569) in
      halt y_570
    | xO =>
      let p_571 := proj_0 143 s_568 in
      pred_double_known_142<137>(p_571)
    | xH =>
      let y_573 := xH() in
      halt y_573
    }
  fun y_wrapper_149<3>(env_574,p_575) :=
    y_known_147<139>(p_575)
  fun ConCert.Execution.Monad.bind_uncurried_known_150<141>(Monad_578) :=
    case Monad_578 of {
    | build_monad =>
      let bind_580 := proj_1 106 Monad_578 in
      halt bind_580
    }
  fun y_wrapper_151<3>(env_581,t_582) :=
    let y_583 := Some(t_582) in
    halt y_583
  fun y_wrapper_152<3>(env_584,t_585) :=
    let env_586 := con_250() in
    let y_wrapper_clo_587 := con_15(y_wrapper_151,env_586) in
    halt y_wrapper_clo_587
  fun y_wrapper_153<3>(env_588,f_589) :=
    let v_proj_592 := proj_0 259 env_588 in
    y_uncurried_uncurried_uncurried_known_156<3>(f_589,v_proj_592)
  fun y_wrapper_154<3>(env_594,v_595) :=
    let t_proj_596 := proj_1 261 env_594 in
    let u_proj_597 := proj_0 261 env_594 in
    let env_598 := con_259(v_595,u_proj_597,t_proj_596) in
    let y_wrapper_clo_599 := con_15(y_wrapper_153,env_598) in
    halt y_wrapper_clo_599
  fun y_wrapper_155<3>(env_600,u_601) :=
    let t_proj_602 := proj_0 263 env_600 in
    let env_603 := con_261(u_601,t_proj_602) in
    let y_wrapper_clo_604 := con_15(y_wrapper_154,env_603) in
    halt y_wrapper_clo_604
  fun y_uncurried_uncurried_uncurried_known_156<3>(f_606,v_607) :=
    case v_607 of {
    | Some =>
      let val_610 := proj_0 145 v_607 in
      let f_code_611 := proj_0 15 f_606 in
      let f_env_612 := proj_1 15 f_606 in
      f_code_611<3>(f_env_612,val_610)
    | None =>
      let y_613 := None() in
      halt y_613
    }
  fun y_wrapper_157<3>(env_614,t_615) :=
    let env_616 := con_263(t_615) in
    let y_wrapper_clo_617 := con_15(y_wrapper_155,env_616) in
    halt y_wrapper_clo_617
  fun stdpp.countable.decode_uncurried_uncurried_known_158<142>(Countable_619) :=
    case Countable_619 of {
    | Build_Countable =>
      let decode_622 := proj_1 126 Countable_619 in
      halt decode_622
    }
  fun y_known_159<3>(n_624,stdpp.countable.N_countable_625) :=
    let y_631 := app stdpp.countable.encode_uncurried_uncurried_known_119<131>(stdpp.countable.N_countable_625) in
    let y_633 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(n_624) in
    let y_code_634 := proj_0 15 y_631 in
    let y_env_635 := proj_1 15 y_631 in
    y_code_634<3>(y_env_635,y_633)
  fun y_wrapper_160<3>(env_636,n_637) :=
    let stdpp.countable.N_countable_proj_639 := proj_1 273 env_636 in
    y_known_159<3>(n_637,stdpp.countable.N_countable_proj_639)
  fun y_161<3>(env_641,n_642) :=
    let ConCert.Execution.OptionMonad.Monad_option_proj_645 := proj_1 275 env_641 in
    let y_646 := app ConCert.Execution.Monad.bind_uncurried_known_150<141>(ConCert.Execution.OptionMonad.Monad_option_proj_645) in
    let y_647 := con_99() in
    let y_code_648 := proj_0 15 y_646 in
    let y_env_649 := proj_1 15 y_646 in
    let y_650 := app y_code_648<3>(y_env_649,y_647) in
    let y_651 := con_99() in
    let y_code_652 := proj_0 15 y_650 in
    let y_env_653 := proj_1 15 y_650 in
    let y_654 := app y_code_652<3>(y_env_653,y_651) in
    let stdpp.countable.N_countable_proj_657 := proj_2 275 env_641 in
    let y_660 := app stdpp.countable.decode_uncurried_uncurried_known_158<142>(stdpp.countable.N_countable_proj_657) in
    let y_code_661 := proj_0 15 y_660 in
    let y_env_662 := proj_1 15 y_660 in
    let y_663 := app y_code_661<3>(y_env_662,n_642) in
    let y_code_664 := proj_0 15 y_654 in
    let y_env_665 := proj_1 15 y_654 in
    let y_666 := app y_code_664<3>(y_env_665,y_663) in
    let bound_proj_667 := proj_0 275 env_641 in
    let y_proj_668 := proj_3 275 env_641 in
    let env_669 := con_282(bound_proj_667,y_proj_668) in
    let y_wrapper_clo_670 := con_15(y_wrapper_164,env_669) in
    let y_code_671 := proj_0 15 y_666 in
    let y_env_672 := proj_1 15 y_666 in
    y_code_671<3>(y_env_672,y_wrapper_clo_670)
  fun y_known_162<88>(n_674,y_675,bound_676) :=
    let y_679 := app Coq.NArith.BinNatDef.N.compare_uncurried_known_109<88>(n_674,bound_676,y_675) in
    let y_680 := app f_case_known_163<143>(y_679) in
    case y_680 of {
    | Some =>
      let y_681 := con_99() in
      let y_682 := bounded(n_674,y_681) in
      let y_683 := Some(y_682) in
      halt y_683
    | None =>
      let y_684 := None() in
      halt y_684
    }
  fun f_case_known_163<143>(s_686) :=
    case s_686 of {
    | Eq =>
      let y_687 := None() in
      halt y_687
    | Lt =>
      let y_688 := None() in
      halt y_688
    | Gt =>
      let y_689 := con_99() in
      let y_690 := Some(y_689) in
      halt y_690
    }
  fun y_wrapper_164<3>(env_691,n_692) :=
    let y_proj_694 := proj_1 282 env_691 in
    let bound_proj_695 := proj_0 282 env_691 in
    y_known_162<88>(n_692,y_proj_694,bound_proj_695)
  fun ConCert.Execution.Serializable.serialize_uncurried_known_165<144>(Serializable_697) :=
    case Serializable_697 of {
    | build_serializable =>
      let serialize_699 := proj_0 116 Serializable_697 in
      halt serialize_699
    }
  fun y_wrapper_166<3>(env_700,i_701) :=
    let y_702 := ser_int() in
    let y_703 := build_ser_value(y_702,i_701) in
    halt y_703
  fun y_167<3>(env_704,value_705) :=
    let y_707 := app f_case_known_168<145>(value_705) in
    let y_709 := app f_case_known_169<146>(value_705) in
    let y_proj_711 := proj_0 288 env_704 in
    let b_712 := app SerializedType_eqrec_uncurried_known_170<3>(y_707,y_proj_711) in
    let H_714 := app f_case_known_171<147>(b_712) in
    let s_716 := app f_case_known_172<148>(H_714) in
    case s_716 of {
    | left =>
      let y_717 := Some(y_709) in
      halt y_717
    | right =>
      let y_718 := None() in
      halt y_718
    }
  fun f_case_known_168<145>(s_720) :=
    case s_720 of {
    | build_ser_value =>
      let anon_721 := proj_0 117 s_720 in
      halt anon_721
    }
  fun f_case_known_169<146>(s_723) :=
    case s_723 of {
    | build_ser_value =>
      let anon_724 := proj_1 117 s_723 in
      halt anon_724
    }
  fun SerializedType_eqrec_uncurried_known_170<3>(Y_726,X_727) :=
    case X_727 of {
    | ser_unit =>
      case Y_726 of {
      | ser_unit =>
        let y_728 := true() in
        halt y_728
      | ser_int =>
        let y_729 := false() in
        halt y_729
      | ser_bool =>
        let y_730 := false() in
        halt y_730
      | ser_pair =>
        let y_731 := false() in
        halt y_731
      | ser_list =>
        let y_732 := false() in
        halt y_732
      }
    | ser_int =>
      case Y_726 of {
      | ser_unit =>
        let y_733 := false() in
        halt y_733
      | ser_int =>
        let y_734 := true() in
        halt y_734
      | ser_bool =>
        let y_735 := false() in
        halt y_735
      | ser_pair =>
        let y_736 := false() in
        halt y_736
      | ser_list =>
        let y_737 := false() in
        halt y_737
      }
    | ser_bool =>
      case Y_726 of {
      | ser_unit =>
        let y_738 := false() in
        halt y_738
      | ser_int =>
        let y_739 := false() in
        halt y_739
      | ser_bool =>
        let y_740 := true() in
        halt y_740
      | ser_pair =>
        let y_741 := false() in
        halt y_741
      | ser_list =>
        let y_742 := false() in
        halt y_742
      }
    | ser_pair =>
      let anon_743 := proj_0 124 X_727 in
      let anon_744 := proj_1 124 X_727 in
      case Y_726 of {
      | ser_unit =>
        let y_745 := false() in
        halt y_745
      | ser_int =>
        let y_746 := false() in
        halt y_746
      | ser_bool =>
        let y_747 := false() in
        halt y_747
      | ser_pair =>
        let anon_748 := proj_0 124 Y_726 in
        let anon_749 := proj_1 124 Y_726 in
        let y_750 := app SerializedType_eqrec_uncurried_known_170<3>(anon_748,anon_743) in
        let y_751 := app SerializedType_eqrec_uncurried_known_170<3>(anon_749,anon_744) in
        case y_750 of {
        | true =>
          halt y_751
        | false =>
          let y_752 := false() in
          halt y_752
        }
      | ser_list =>
        let y_753 := false() in
        halt y_753
      }
    | ser_list =>
      let anon_754 := proj_0 125 X_727 in
      case Y_726 of {
      | ser_unit =>
        let y_755 := false() in
        halt y_755
      | ser_int =>
        let y_756 := false() in
        halt y_756
      | ser_bool =>
        let y_757 := false() in
        halt y_757
      | ser_pair =>
        let y_758 := false() in
        halt y_758
      | ser_list =>
        let anon_759 := proj_0 125 Y_726 in
        SerializedType_eqrec_uncurried_known_170<3>(anon_759,anon_754)
      }
    }
  fun f_case_known_171<147>(s_761) :=
    case s_761 of {
    | true =>
      let y_762 := con_99() in
      let y_763 := left(y_762) in
      halt y_763
    | false =>
      let y_764 := con_99() in
      let y_765 := right(y_764) in
      halt y_765
    }
  fun f_case_known_172<148>(s_767) :=
    case s_767 of {
    | left =>
      let y_768 := con_99() in
      let y_769 := left(y_768) in
      halt y_769
    | right =>
      let y_770 := con_99() in
      let y_771 := right(y_770) in
      halt y_771
    }
  fun ConCert.Execution.Serializable.deserialize_uncurried_known_173<149>(Serializable_773) :=
    case Serializable_773 of {
    | build_serializable =>
      let deserialize_775 := proj_1 116 Serializable_773 in
      halt deserialize_775
    }
  fun Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(y_777,x_778,y_779) :=
    let y_781 := app f_case_known_175<88>(x_778,y_779,y_777) in
    case y_781 of {
    | Eq =>
      let y_782 := false() in
      halt y_782
    | Lt =>
      let y_783 := true() in
      halt y_783
    | Gt =>
      let y_784 := false() in
      halt y_784
    }
  fun f_case_known_175<88>(s_786,y_787,y_788) :=
    case s_786 of {
    | Z0 =>
      case y_788 of {
      | Z0 =>
        let y_789 := Eq() in
        halt y_789
      | Zpos =>
        let y_790 := Lt() in
        halt y_790
      | Zneg =>
        let y_791 := Gt() in
        halt y_791
      }
    | Zpos =>
      let x'_792 := proj_0 140 s_786 in
      case y_788 of {
      | Z0 =>
        let y_793 := Gt() in
        halt y_793
      | Zpos =>
        let y'_794 := proj_0 140 y_788 in
        compare_cont_uncurried_uncurried_known_108<88>(y'_794,x'_792,y_787)
      | Zneg =>
        let y_796 := Gt() in
        halt y_796
      }
    | Zneg =>
      let x'_797 := proj_0 141 s_786 in
      case y_788 of {
      | Z0 =>
        let y_798 := Lt() in
        halt y_798
      | Zpos =>
        let y_799 := Lt() in
        halt y_799
      | Zneg =>
        let y'_800 := proj_0 141 y_788 in
        let y_802 := app compare_cont_uncurried_uncurried_known_108<88>(y'_800,x'_797,y_787) in
        case y_802 of {
        | Eq =>
          let y_803 := Eq() in
          halt y_803
        | Lt =>
          let y_804 := Gt() in
          halt y_804
        | Gt =>
          let y_805 := Lt() in
          halt y_805
        }
      }
    }
  fun y_wrapper_176<3>(env_806,p_807) :=
    let ConCert.Execution.Serializable.int_serializable_proj_808 := proj_0 301 env_806 in
    let y_811 := app ConCert.Execution.Serializable.serialize_uncurried_known_165<144>(ConCert.Execution.Serializable.int_serializable_proj_808) in
    let y_812 := Zpos(p_807) in
    let y_code_813 := proj_0 15 y_811 in
    let y_env_814 := proj_1 15 y_811 in
    y_code_813<3>(y_env_814,y_812)
  fun y_177<3>(env_815,z_816) :=
    let ConCert.Execution.OptionMonad.Monad_option_proj_819 := proj_1 303 env_815 in
    let y_820 := app ConCert.Execution.Monad.bind_uncurried_known_150<141>(ConCert.Execution.OptionMonad.Monad_option_proj_819) in
    let y_821 := con_99() in
    let y_code_822 := proj_0 15 y_820 in
    let y_env_823 := proj_1 15 y_820 in
    let y_824 := app y_code_822<3>(y_env_823,y_821) in
    let y_825 := con_99() in
    let y_code_826 := proj_0 15 y_824 in
    let y_env_827 := proj_1 15 y_824 in
    let y_828 := app y_code_826<3>(y_env_827,y_825) in
    let ConCert.Execution.Serializable.int_serializable_proj_831 := proj_2 303 env_815 in
    let y_832 := app ConCert.Execution.Serializable.deserialize_uncurried_known_173<149>(ConCert.Execution.Serializable.int_serializable_proj_831) in
    let y_code_833 := proj_0 15 y_832 in
    let y_env_834 := proj_1 15 y_832 in
    let y_835 := app y_code_833<3>(y_env_834,z_816) in
    let y_code_836 := proj_0 15 y_828 in
    let y_env_837 := proj_1 15 y_828 in
    let y_838 := app y_code_836<3>(y_env_837,y_835) in
    let y_proj_839 := proj_0 303 env_815 in
    let env_840 := con_309(y_proj_839) in
    let y_wrapper_clo_841 := con_15(y_wrapper_180,env_840) in
    let y_code_842 := proj_0 15 y_838 in
    let y_env_843 := proj_1 15 y_838 in
    y_code_842<3>(y_env_843,y_wrapper_clo_841)
  fun y_known_178<3>(z'_845,y_846) :=
    let y_847 := Z0() in
    let y_849 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(z'_845,y_847,y_846) in
    case y_849 of {
    | true =>
      let y_851 := app f_case_known_179<150>(z'_845) in
      let y_852 := Some(y_851) in
      halt y_852
    | false =>
      let y_853 := None() in
      halt y_853
    }
  fun f_case_known_179<150>(s_855) :=
    case s_855 of {
    | Z0 =>
      let y_856 := xH() in
      halt y_856
    | Zpos =>
      let p_857 := proj_0 140 s_855 in
      halt p_857
    | Zneg =>
      let y_858 := xH() in
      halt y_858
    }
  fun y_wrapper_180<3>(env_859,z'_860) :=
    let y_proj_862 := proj_0 309 env_859 in
    y_known_178<3>(z'_860,y_proj_862)
  fun Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(y_864,x_865,y_866) :=
    let y_868 := app Coq.NArith.BinNatDef.N.compare_uncurried_known_109<88>(y_864,x_865,y_866) in
    case y_868 of {
    | Eq =>
      let y_869 := true() in
      halt y_869
    | Lt =>
      let y_870 := true() in
      halt y_870
    | Gt =>
      let y_871 := false() in
      halt y_871
    }
  fun Coq.NArith.BinNatDef.N.succ_double_known_182<151>(x_873) :=
    case x_873 of {
    | N0 =>
      let y_874 := xH() in
      let y_875 := Npos(y_874) in
      halt y_875
    | Npos =>
      let p_876 := proj_0 113 x_873 in
      let y_877 := xI(p_876) in
      let y_878 := Npos(y_877) in
      halt y_878
    }
  fun Coq.PArith.BinPosDef.Pos.double_mask_known_183<152>(x_880) :=
    case x_880 of {
    | IsNul =>
      let y_881 := IsNul() in
      halt y_881
    | IsPos =>
      let p_882 := proj_0 104 x_880 in
      let y_883 := xO(p_882) in
      let y_884 := IsPos(y_883) in
      halt y_884
    | IsNeg =>
      let y_885 := IsNeg() in
      halt y_885
    }
  fun Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<153>(x_887) :=
    case x_887 of {
    | IsNul =>
      let y_888 := xH() in
      let y_889 := IsPos(y_888) in
      halt y_889
    | IsPos =>
      let p_890 := proj_0 104 x_887 in
      let y_891 := xI(p_890) in
      let y_892 := IsPos(y_891) in
      halt y_892
    | IsNeg =>
      let y_893 := IsNeg() in
      halt y_893
    }
  fun Coq.NArith.BinNatDef.N.sub_uncurried_known_185<3>(m_895,n_896) :=
    case n_896 of {
    | N0 =>
      let y_897 := N0() in
      halt y_897
    | Npos =>
      let n'_898 := proj_0 113 n_896 in
      case m_895 of {
      | N0 =>
        halt n_896
      | Npos =>
        let m'_899 := proj_0 113 m_895 in
        let y_901 := app sub_mask_uncurried_known_186<3>(m'_899,n'_898) in
        case y_901 of {
        | IsNul =>
          let y_902 := N0() in
          halt y_902
        | IsPos =>
          let p_903 := proj_0 104 y_901 in
          let y_904 := Npos(p_903) in
          halt y_904
        | IsNeg =>
          let y_905 := N0() in
          halt y_905
        }
      }
    }
  fun sub_mask_uncurried_known_186<3>(y_907,x_908) :=
    case x_908 of {
    | xI =>
      let p_909 := proj_0 142 x_908 in
      case y_907 of {
      | xI =>
        let q_910 := proj_0 142 y_907 in
        let y_911 := app sub_mask_uncurried_known_186<3>(q_910,p_909) in
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<152>(y_911)
      | xO =>
        let q_913 := proj_0 143 y_907 in
        let y_914 := app sub_mask_uncurried_known_186<3>(q_913,p_909) in
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<153>(y_914)
      | xH =>
        let y_916 := xO(p_909) in
        let y_917 := IsPos(y_916) in
        halt y_917
      }
    | xO =>
      let p_918 := proj_0 143 x_908 in
      case y_907 of {
      | xI =>
        let q_919 := proj_0 142 y_907 in
        let y_920 := app sub_mask_carry_uncurried_known_187<3>(q_919,p_918) in
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<153>(y_920)
      | xO =>
        let q_922 := proj_0 143 y_907 in
        let y_923 := app sub_mask_uncurried_known_186<3>(q_922,p_918) in
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<152>(y_923)
      | xH =>
        let y_926 := app pred_double_known_142<137>(p_918) in
        let y_927 := IsPos(y_926) in
        halt y_927
      }
    | xH =>
      case y_907 of {
      | xI =>
        let y_928 := IsNeg() in
        halt y_928
      | xO =>
        let y_929 := IsNeg() in
        halt y_929
      | xH =>
        let y_930 := IsNul() in
        halt y_930
      }
    }
  fun sub_mask_carry_uncurried_known_187<3>(y_932,x_933) :=
    case x_933 of {
    | xI =>
      let p_934 := proj_0 142 x_933 in
      case y_932 of {
      | xI =>
        let q_935 := proj_0 142 y_932 in
        let y_936 := app sub_mask_carry_uncurried_known_187<3>(q_935,p_934) in
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<153>(y_936)
      | xO =>
        let q_938 := proj_0 143 y_932 in
        let y_939 := app sub_mask_uncurried_known_186<3>(q_938,p_934) in
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<152>(y_939)
      | xH =>
        let y_942 := app pred_double_known_142<137>(p_934) in
        let y_943 := IsPos(y_942) in
        halt y_943
      }
    | xO =>
      let p_944 := proj_0 143 x_933 in
      case y_932 of {
      | xI =>
        let q_945 := proj_0 142 y_932 in
        let y_946 := app sub_mask_carry_uncurried_known_187<3>(q_945,p_944) in
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<152>(y_946)
      | xO =>
        let q_948 := proj_0 143 y_932 in
        let y_949 := app sub_mask_carry_uncurried_known_187<3>(q_948,p_944) in
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<153>(y_949)
      | xH =>
        case p_944 of {
        | xI =>
          let p_951 := proj_0 142 p_944 in
          let y_952 := xO(p_951) in
          let y_953 := xO(y_952) in
          let y_954 := IsPos(y_953) in
          halt y_954
        | xO =>
          let p_955 := proj_0 143 p_944 in
          let y_957 := app pred_double_known_142<137>(p_955) in
          let y_958 := xO(y_957) in
          let y_959 := IsPos(y_958) in
          halt y_959
        | xH =>
          let y_960 := IsNul() in
          halt y_960
        }
      }
    | xH =>
      let y_961 := IsNeg() in
      halt y_961
    }
  fun Coq.NArith.BinNatDef.N.double_known_188<154>(n_963) :=
    case n_963 of {
    | N0 =>
      let y_964 := N0() in
      halt y_964
    | Npos =>
      let p_965 := proj_0 113 n_963 in
      let y_966 := xO(p_965) in
      let y_967 := Npos(y_966) in
      halt y_967
    }
  fun add_uncurried_known_189<3>(y_969,x_970) :=
    case x_970 of {
    | xI =>
      let p_971 := proj_0 142 x_970 in
      case y_969 of {
      | xI =>
        let q_972 := proj_0 142 y_969 in
        let y_973 := app add_carry_uncurried_known_190<3>(q_972,p_971) in
        let y_974 := xO(y_973) in
        halt y_974
      | xO =>
        let q_975 := proj_0 143 y_969 in
        let y_976 := app add_uncurried_known_189<3>(q_975,p_971) in
        let y_977 := xI(y_976) in
        halt y_977
      | xH =>
        let y_979 := app succ_known_141<136>(p_971) in
        let y_980 := xO(y_979) in
        halt y_980
      }
    | xO =>
      let p_981 := proj_0 143 x_970 in
      case y_969 of {
      | xI =>
        let q_982 := proj_0 142 y_969 in
        let y_983 := app add_uncurried_known_189<3>(q_982,p_981) in
        let y_984 := xI(y_983) in
        halt y_984
      | xO =>
        let q_985 := proj_0 143 y_969 in
        let y_986 := app add_uncurried_known_189<3>(q_985,p_981) in
        let y_987 := xO(y_986) in
        halt y_987
      | xH =>
        let y_988 := xI(p_981) in
        halt y_988
      }
    | xH =>
      case y_969 of {
      | xI =>
        let q_989 := proj_0 142 y_969 in
        let y_991 := app succ_known_141<136>(q_989) in
        let y_992 := xO(y_991) in
        halt y_992
      | xO =>
        let q_993 := proj_0 143 y_969 in
        let y_994 := xI(q_993) in
        halt y_994
      | xH =>
        let y_995 := xH() in
        let y_996 := xO(y_995) in
        halt y_996
      }
    }
  fun add_carry_uncurried_known_190<3>(y_998,x_999) :=
    case x_999 of {
    | xI =>
      let p_1000 := proj_0 142 x_999 in
      case y_998 of {
      | xI =>
        let q_1001 := proj_0 142 y_998 in
        let y_1002 := app add_carry_uncurried_known_190<3>(q_1001,p_1000) in
        let y_1003 := xI(y_1002) in
        halt y_1003
      | xO =>
        let q_1004 := proj_0 143 y_998 in
        let y_1005 := app add_carry_uncurried_known_190<3>(q_1004,p_1000) in
        let y_1006 := xO(y_1005) in
        halt y_1006
      | xH =>
        let y_1008 := app succ_known_141<136>(p_1000) in
        let y_1009 := xI(y_1008) in
        halt y_1009
      }
    | xO =>
      let p_1010 := proj_0 143 x_999 in
      case y_998 of {
      | xI =>
        let q_1011 := proj_0 142 y_998 in
        let y_1012 := app add_carry_uncurried_known_190<3>(q_1011,p_1010) in
        let y_1013 := xO(y_1012) in
        halt y_1013
      | xO =>
        let q_1014 := proj_0 143 y_998 in
        let y_1015 := app add_uncurried_known_189<3>(q_1014,p_1010) in
        let y_1016 := xI(y_1015) in
        halt y_1016
      | xH =>
        let y_1018 := app succ_known_141<136>(p_1010) in
        let y_1019 := xO(y_1018) in
        halt y_1019
      }
    | xH =>
      case y_998 of {
      | xI =>
        let q_1020 := proj_0 142 y_998 in
        let y_1022 := app succ_known_141<136>(q_1020) in
        let y_1023 := xI(y_1022) in
        halt y_1023
      | xO =>
        let q_1024 := proj_0 143 y_998 in
        let y_1026 := app succ_known_141<136>(q_1024) in
        let y_1027 := xO(y_1026) in
        halt y_1027
      | xH =>
        let y_1028 := xH() in
        let y_1029 := xI(y_1028) in
        halt y_1029
      }
    }
  fun f_case_known_191<3>(s_1031,y_1032) :=
    case s_1031 of {
    | N0 =>
      let y_1033 := xH() in
      let y_1034 := Npos(y_1033) in
      halt y_1034
    | Npos =>
      let p_1035 := proj_0 113 s_1031 in
      let y_1036 := xH() in
      let env_1037 := con_345(y_1032) in
      let y_1038 := app iter_fix_uncurried_193<88>(env_1037,p_1035,y_1036) in
      let y_1039 := Npos(y_1038) in
      halt y_1039
    }
  fun mul_uncurried_known_192<3>(y_1041,x_1042) :=
    case x_1042 of {
    | xI =>
      let p_1043 := proj_0 142 x_1042 in
      let y_1044 := app mul_uncurried_known_192<3>(y_1041,p_1043) in
      let y_1045 := xO(y_1044) in
      add_uncurried_known_189<3>(y_1045,y_1041)
    | xO =>
      let p_1047 := proj_0 143 x_1042 in
      let y_1048 := app mul_uncurried_known_192<3>(y_1041,p_1047) in
      let y_1049 := xO(y_1048) in
      halt y_1049
    | xH =>
      halt y_1041
    }
  fun iter_fix_uncurried_193<88>(env_1050,n_1051,x_1052) :=
    case n_1051 of {
    | xI =>
      let n'_1053 := proj_0 142 n_1051 in
      let y_1054 := app iter_fix_uncurried_193<88>(env_1050,n'_1053,x_1052) in
      let y_1055 := app iter_fix_uncurried_193<88>(env_1050,n'_1053,y_1054) in
      let y_proj_1057 := proj_0 345 env_1050 in
      mul_uncurried_known_192<3>(y_1055,y_proj_1057)
    | xO =>
      let n'_1058 := proj_0 143 n_1051 in
      let y_1059 := app iter_fix_uncurried_193<88>(env_1050,n'_1058,x_1052) in
      iter_fix_uncurried_193<88>(env_1050,n'_1058,y_1059)
    | xH =>
      let y_proj_1061 := proj_0 345 env_1050 in
      mul_uncurried_known_192<3>(x_1052,y_proj_1061)
    }
  fun y_wrapper_194<3>(env_1062,b_1063) :=
    let a_proj_1065 := proj_0 353 env_1062 in
    let y_1067 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(a_proj_1065) in
    let y_1069 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(b_1063) in
    Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_1069,y_1067)
  fun y_wrapper_195<3>(env_1071,a_1072) :=
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1073 := proj_0 355 env_1071 in
    let env_1074 := con_353(a_1072,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1073) in
    let y_wrapper_clo_1075 := con_15(y_wrapper_194,env_1074) in
    halt y_wrapper_clo_1075
  fun y_wrapper_196<3>(env_1076,b_1077) :=
    let a_proj_1079 := proj_0 360 env_1076 in
    ConCert.Execution.BoundedN.BoundedN.eqb_spec_uncurried_uncurried_known_113<3>(b_1077,a_proj_1079)
  fun y_wrapper_197<3>(env_1081,a_1082) :=
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1083 := proj_0 362 env_1081 in
    let env_1084 := con_360(a_1082,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1083) in
    let y_wrapper_clo_1085 := con_15(y_wrapper_196,env_1084) in
    halt y_wrapper_clo_1085
  fun y_wrapper_198<3>(env_1086,y_1087) :=
    let x_proj_1089 := proj_0 367 env_1086 in
    ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_1087,x_proj_1089)
  fun y_wrapper_199<3>(env_1091,x_1092) :=
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1093 := proj_0 369 env_1091 in
    let env_1094 := con_367(x_1092,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1093) in
    let y_wrapper_clo_1095 := con_15(y_wrapper_198,env_1094) in
    halt y_wrapper_clo_1095
  fun y_known_200<99>(bn_1097,y_1098,stdpp.countable.N_countable_1099,ConCert.Execution.OptionMonad.Monad_option_1100,ConCert.Execution.Serializable.ser_positive_equivalence_1101,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1102) :=
    let y_1105 := app ConCert.Execution.Serializable.serialize_uncurried_known_165<144>(ConCert.Execution.Serializable.ser_positive_equivalence_1101) in
    let env_1108 := con_273(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1102,stdpp.countable.N_countable_1099) in
    let env_1109 := con_275(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1102,ConCert.Execution.OptionMonad.Monad_option_1100,stdpp.countable.N_countable_1099,y_1098) in
    let y_1110 := con_99() in
    let y_wrapper_clo_1111 := con_15(y_wrapper_160,env_1108) in
    let y_clo_1112 := con_15(y_161,env_1109) in
    let y_1113 := Build_Countable(y_wrapper_clo_1111,y_clo_1112,y_1110) in
    let y_1116 := app stdpp.countable.encode_uncurried_uncurried_known_119<131>(y_1113) in
    let y_code_1117 := proj_0 15 y_1116 in
    let y_env_1118 := proj_1 15 y_1116 in
    let y_1119 := app y_code_1117<3>(y_env_1118,bn_1097) in
    let y_code_1120 := proj_0 15 y_1105 in
    let y_env_1121 := proj_1 15 y_1105 in
    y_code_1120<3>(y_env_1121,y_1119)
  fun y_wrapper_201<3>(env_1122,y_1123) :=
    let x_proj_1125 := proj_0 376 env_1122 in
    ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_1123,x_proj_1125)
  fun y_wrapper_203<3>(env_1132,bn_1133) :=
    let y_proj_1135 := proj_0 382 env_1132 in
    let stdpp.countable.N_countable_proj_1136 := proj_1 382 env_1132 in
    let ConCert.Execution.OptionMonad.Monad_option_proj_1137 := proj_2 382 env_1132 in
    let ConCert.Execution.Serializable.ser_positive_equivalence_proj_1138 := proj_3 382 env_1132 in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1139 := proj_4 382 env_1132 in
    y_known_200<99>(bn_1133,y_proj_1135,stdpp.countable.N_countable_proj_1136,ConCert.Execution.OptionMonad.Monad_option_proj_1137,ConCert.Execution.Serializable.ser_positive_equivalence_proj_1138,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1139)
  fun y_204<3>(env_1140,v_1141) :=
    let ConCert.Execution.OptionMonad.Monad_option_proj_1144 := proj_2 384 env_1140 in
    let y_1145 := app ConCert.Execution.Monad.bind_uncurried_known_150<141>(ConCert.Execution.OptionMonad.Monad_option_proj_1144) in
    let y_1146 := con_99() in
    let y_code_1147 := proj_0 15 y_1145 in
    let y_env_1148 := proj_1 15 y_1145 in
    let y_1149 := app y_code_1147<3>(y_env_1148,y_1146) in
    let y_1150 := con_99() in
    let y_code_1151 := proj_0 15 y_1149 in
    let y_env_1152 := proj_1 15 y_1149 in
    let y_1153 := app y_code_1151<3>(y_env_1152,y_1150) in
    let ConCert.Execution.Serializable.ser_positive_equivalence_proj_1156 := proj_3 384 env_1140 in
    let y_1157 := app ConCert.Execution.Serializable.deserialize_uncurried_known_173<149>(ConCert.Execution.Serializable.ser_positive_equivalence_proj_1156) in
    let y_code_1158 := proj_0 15 y_1157 in
    let y_env_1159 := proj_1 15 y_1157 in
    let y_1160 := app y_code_1158<3>(y_env_1159,v_1141) in
    let y_code_1161 := proj_0 15 y_1153 in
    let y_env_1162 := proj_1 15 y_1153 in
    let y_1163 := app y_code_1161<3>(y_env_1162,y_1160) in
    let y_proj_1164 := proj_0 384 env_1140 in
    let stdpp.countable.N_countable_proj_1165 := proj_1 384 env_1140 in
    let ConCert.Execution.OptionMonad.Monad_option_proj_1166 := proj_2 384 env_1140 in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1167 := proj_4 384 env_1140 in
    let env_1168 := con_397(y_proj_1164,stdpp.countable.N_countable_proj_1165,ConCert.Execution.OptionMonad.Monad_option_proj_1166,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1167) in
    let y_wrapper_clo_1169 := con_15(y_wrapper_208,env_1168) in
    let y_code_1170 := proj_0 15 y_1163 in
    let y_env_1171 := proj_1 15 y_1163 in
    y_code_1170<3>(y_env_1171,y_wrapper_clo_1169)
  fun y_known_205<53>(p_1173,y_1174,stdpp.countable.N_countable_1175,ConCert.Execution.OptionMonad.Monad_option_1176,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1177) :=
    let env_1180 := con_273(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1177,stdpp.countable.N_countable_1175) in
    let env_1181 := con_275(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1177,ConCert.Execution.OptionMonad.Monad_option_1176,stdpp.countable.N_countable_1175,y_1174) in
    let y_1182 := con_99() in
    let y_wrapper_clo_1183 := con_15(y_wrapper_160,env_1180) in
    let y_clo_1184 := con_15(y_161,env_1181) in
    let y_1185 := Build_Countable(y_wrapper_clo_1183,y_clo_1184,y_1182) in
    let y_1188 := app stdpp.countable.decode_uncurried_uncurried_known_158<142>(y_1185) in
    let y_code_1189 := proj_0 15 y_1188 in
    let y_env_1190 := proj_1 15 y_1188 in
    y_code_1189<3>(y_env_1190,p_1173)
  fun y_wrapper_206<3>(env_1191,y_1192) :=
    let x_proj_1194 := proj_0 391 env_1191 in
    ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_1192,x_proj_1194)
  fun y_wrapper_208<3>(env_1201,p_1202) :=
    let y_proj_1204 := proj_0 397 env_1201 in
    let stdpp.countable.N_countable_proj_1205 := proj_1 397 env_1201 in
    let ConCert.Execution.OptionMonad.Monad_option_proj_1206 := proj_2 397 env_1201 in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1207 := proj_3 397 env_1201 in
    y_known_205<53>(p_1202,y_proj_1204,stdpp.countable.N_countable_proj_1205,ConCert.Execution.OptionMonad.Monad_option_proj_1206,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1207)
  fun y_209<3>(env_1208,a_1209) :=
    let y_1210 := xH() in
    let y_1211 := xO(y_1210) in
    let y_1212 := Npos(y_1211) in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1214 := proj_1 399 env_1208 in
    let y_proj_1215 := proj_0 399 env_1208 in
    let y_1216 := app f_case_known_210<88>(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1214,y_proj_1215,y_1212) in
    let y_1218 := app f_case_known_212<155>(y_1216) in
    let y_1221 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<128>(a_1209) in
    let y_proj_1223 := proj_0 399 env_1208 in
    Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(y_1221,y_1218,y_proj_1223)
  fun f_case_known_210<88>(s_1225,y_1226,y_1227) :=
    case s_1225 of {
    | N0 =>
      let y_1228 := N0() in
      let y_1229 := N0() in
      let y_1230 := pair(y_1228,y_1229) in
      halt y_1230
    | Npos =>
      let na_1231 := proj_0 113 s_1225 in
      pos_div_eucl_uncurried_known_211<88>(y_1227,na_1231,y_1226)
    }
  fun pos_div_eucl_uncurried_known_211<88>(b_1234,a_1235,y_1236) :=
    case a_1235 of {
    | xI =>
      let a'_1237 := proj_0 142 a_1235 in
      let y_1238 := app pos_div_eucl_uncurried_known_211<88>(b_1234,a'_1237,y_1236) in
      case y_1238 of {
      | pair =>
        let q_1239 := proj_0 120 y_1238 in
        let r_1240 := proj_1 120 y_1238 in
        let r'_1242 := app Coq.NArith.BinNatDef.N.succ_double_known_182<151>(r_1240) in
        let y_1244 := app Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(r'_1242,b_1234,y_1236) in
        case y_1244 of {
        | true =>
          let y_1246 := app Coq.NArith.BinNatDef.N.succ_double_known_182<151>(q_1239) in
          let y_1248 := app Coq.NArith.BinNatDef.N.sub_uncurried_known_185<3>(b_1234,r'_1242) in
          let y_1249 := pair(y_1246,y_1248) in
          halt y_1249
        | false =>
          let y_1251 := app Coq.NArith.BinNatDef.N.double_known_188<154>(q_1239) in
          let y_1252 := pair(y_1251,r'_1242) in
          halt y_1252
        }
      }
    | xO =>
      let a'_1253 := proj_0 143 a_1235 in
      let y_1254 := app pos_div_eucl_uncurried_known_211<88>(b_1234,a'_1253,y_1236) in
      case y_1254 of {
      | pair =>
        let q_1255 := proj_0 120 y_1254 in
        let r_1256 := proj_1 120 y_1254 in
        let r'_1258 := app Coq.NArith.BinNatDef.N.double_known_188<154>(r_1256) in
        let y_1260 := app Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(r'_1258,b_1234,y_1236) in
        case y_1260 of {
        | true =>
          let y_1262 := app Coq.NArith.BinNatDef.N.succ_double_known_182<151>(q_1255) in
          let y_1264 := app Coq.NArith.BinNatDef.N.sub_uncurried_known_185<3>(b_1234,r'_1258) in
          let y_1265 := pair(y_1262,y_1264) in
          halt y_1265
        | false =>
          let y_1267 := app Coq.NArith.BinNatDef.N.double_known_188<154>(q_1255) in
          let y_1268 := pair(y_1267,r'_1258) in
          halt y_1268
        }
      }
    | xH =>
      case b_1234 of {
      | N0 =>
        let y_1269 := N0() in
        let y_1270 := xH() in
        let y_1271 := Npos(y_1270) in
        let y_1272 := pair(y_1269,y_1271) in
        halt y_1272
      | Npos =>
        let p_1273 := proj_0 113 b_1234 in
        case p_1273 of {
        | xI =>
          let y_1274 := N0() in
          let y_1275 := xH() in
          let y_1276 := Npos(y_1275) in
          let y_1277 := pair(y_1274,y_1276) in
          halt y_1277
        | xO =>
          let y_1278 := N0() in
          let y_1279 := xH() in
          let y_1280 := Npos(y_1279) in
          let y_1281 := pair(y_1278,y_1280) in
          halt y_1281
        | xH =>
          let y_1282 := xH() in
          let y_1283 := Npos(y_1282) in
          let y_1284 := N0() in
          let y_1285 := pair(y_1283,y_1284) in
          halt y_1285
        }
      }
    }
  fun f_case_known_212<155>(s_1287) :=
    case s_1287 of {
    | pair =>
      let x_1288 := proj_0 120 s_1287 in
      halt x_1288
    }
  fun Coq.ZArith.BinIntDef.Z.double_known_213<156>(x_1290) :=
    case x_1290 of {
    | Z0 =>
      let y_1291 := Z0() in
      halt y_1291
    | Zpos =>
      let p_1292 := proj_0 140 x_1290 in
      let y_1293 := xO(p_1292) in
      let y_1294 := Zpos(y_1293) in
      halt y_1294
    | Zneg =>
      let p_1295 := proj_0 141 x_1290 in
      let y_1296 := xO(p_1295) in
      let y_1297 := Zneg(y_1296) in
      halt y_1297
    }
  fun Coq.ZArith.BinIntDef.Z.double_wrapper_214<3>(env_1298,x_1299) :=
    Coq.ZArith.BinIntDef.Z.double_known_213<156>(x_1299)
  fun Coq.ZArith.BinIntDef.Z.succ_double_known_215<157>(x_1302) :=
    case x_1302 of {
    | Z0 =>
      let y_1303 := xH() in
      let y_1304 := Zpos(y_1303) in
      halt y_1304
    | Zpos =>
      let p_1305 := proj_0 140 x_1302 in
      let y_1306 := xI(p_1305) in
      let y_1307 := Zpos(y_1306) in
      halt y_1307
    | Zneg =>
      let p_1308 := proj_0 141 x_1302 in
      let y_1310 := app pred_double_known_142<137>(p_1308) in
      let y_1311 := Zneg(y_1310) in
      halt y_1311
    }
  fun Coq.ZArith.BinIntDef.Z.succ_double_wrapper_216<3>(env_1312,x_1313) :=
    Coq.ZArith.BinIntDef.Z.succ_double_known_215<157>(x_1313)
  fun pos_sub_uncurried_known_217<3>(y_1316,x_1317) :=
    case x_1317 of {
    | xI =>
      let p_1318 := proj_0 142 x_1317 in
      case y_1316 of {
      | xI =>
        let q_1319 := proj_0 142 y_1316 in
        let y_1320 := app pos_sub_uncurried_known_217<3>(q_1319,p_1318) in
        Coq.ZArith.BinIntDef.Z.double_known_213<156>(y_1320)
      | xO =>
        let q_1322 := proj_0 143 y_1316 in
        let y_1323 := app pos_sub_uncurried_known_217<3>(q_1322,p_1318) in
        Coq.ZArith.BinIntDef.Z.succ_double_known_215<157>(y_1323)
      | xH =>
        let y_1325 := xO(p_1318) in
        let y_1326 := Zpos(y_1325) in
        halt y_1326
      }
    | xO =>
      let p_1327 := proj_0 143 x_1317 in
      case y_1316 of {
      | xI =>
        let q_1328 := proj_0 142 y_1316 in
        let y_1329 := app pos_sub_uncurried_known_217<3>(q_1328,p_1327) in
        case y_1329 of {
        | Z0 =>
          let y_1330 := xH() in
          let y_1331 := Zneg(y_1330) in
          halt y_1331
        | Zpos =>
          let p_1332 := proj_0 140 y_1329 in
          let y_1334 := app pred_double_known_142<137>(p_1332) in
          let y_1335 := Zpos(y_1334) in
          halt y_1335
        | Zneg =>
          let p_1336 := proj_0 141 y_1329 in
          let y_1337 := xI(p_1336) in
          let y_1338 := Zneg(y_1337) in
          halt y_1338
        }
      | xO =>
        let q_1339 := proj_0 143 y_1316 in
        let y_1340 := app pos_sub_uncurried_known_217<3>(q_1339,p_1327) in
        Coq.ZArith.BinIntDef.Z.double_known_213<156>(y_1340)
      | xH =>
        let y_1343 := app pred_double_known_142<137>(p_1327) in
        let y_1344 := Zpos(y_1343) in
        halt y_1344
      }
    | xH =>
      case y_1316 of {
      | xI =>
        let q_1345 := proj_0 142 y_1316 in
        let y_1346 := xO(q_1345) in
        let y_1347 := Zneg(y_1346) in
        halt y_1347
      | xO =>
        let q_1348 := proj_0 143 y_1316 in
        let y_1350 := app pred_double_known_142<137>(q_1348) in
        let y_1351 := Zneg(y_1350) in
        halt y_1351
      | xH =>
        let y_1352 := Z0() in
        halt y_1352
      }
    }
  fun Coq.ZArith.BinIntDef.Z.add_uncurried_known_218<3>(y_1354,x_1355) :=
    case x_1355 of {
    | Z0 =>
      halt y_1354
    | Zpos =>
      let x'_1356 := proj_0 140 x_1355 in
      case y_1354 of {
      | Z0 =>
        halt x_1355
      | Zpos =>
        let y'_1357 := proj_0 140 y_1354 in
        let y_1359 := app add_uncurried_known_189<3>(y'_1357,x'_1356) in
        let y_1360 := Zpos(y_1359) in
        halt y_1360
      | Zneg =>
        let y'_1361 := proj_0 141 y_1354 in
        pos_sub_uncurried_known_217<3>(y'_1361,x'_1356)
      }
    | Zneg =>
      let x'_1363 := proj_0 141 x_1355 in
      case y_1354 of {
      | Z0 =>
        halt x_1355
      | Zpos =>
        let y'_1364 := proj_0 140 y_1354 in
        pos_sub_uncurried_known_217<3>(x'_1363,y'_1364)
      | Zneg =>
        let y'_1366 := proj_0 141 y_1354 in
        let y_1368 := app add_uncurried_known_189<3>(y'_1366,x'_1363) in
        let y_1369 := Zneg(y_1368) in
        halt y_1369
      }
    }
  fun ConCert.Examples.Counter.Counter.count_uncurried_known_219<158>(s_1371) :=
    case s_1371 of {
    | build_state =>
      let count_1373 := proj_0 100 s_1371 in
      halt count_1373
    }
  fun ConCert.Examples.Counter.Counter.owner_uncurried_known_220<159>(s_1375) :=
    case s_1375 of {
    | build_state =>
      let owner_1377 := proj_1 100 s_1375 in
      halt owner_1377
    }
  fun Coq.ZArith.BinIntDef.Z.opp_known_221<160>(x_1379) :=
    case x_1379 of {
    | Z0 =>
      let y_1380 := Z0() in
      halt y_1380
    | Zpos =>
      let x_1381 := proj_0 140 x_1379 in
      let y_1382 := Zneg(x_1381) in
      halt y_1382
    | Zneg =>
      let x_1383 := proj_0 141 x_1379 in
      let y_1384 := Zpos(x_1383) in
      halt y_1384
    }
  fun of_pos_rec_uncurried_known_222<3>(p_1386,n_1387) :=
    case n_1387 of {
    | O =>
      let y_1388 := prim: (int: 0) in
      halt y_1388
    | S =>
      let n_1389 := proj_0 135 n_1387 in
      case p_1386 of {
      | xI =>
        let p_1390 := proj_0 142 p_1386 in
        let y_1391 := app of_pos_rec_uncurried_known_222<3>(p_1390,n_1389) in
        let y_1392 := prim: (int: 1) in
        let prim_1393 := prim_104(y_1391,y_1392) in
        let y_1394 := prim: (int: 1) in
        let prim_1395 := prim_106(prim_1393,y_1394) in
        halt prim_1395
      | xO =>
        let p_1396 := proj_0 143 p_1386 in
        let y_1397 := app of_pos_rec_uncurried_known_222<3>(p_1396,n_1389) in
        let y_1398 := prim: (int: 1) in
        let prim_1399 := prim_104(y_1397,y_1398) in
        halt prim_1399
      | xH =>
        let y_1400 := prim: (int: 1) in
        halt y_1400
      }
    }
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_known_223<3>(s_1402,Coq.Numbers.Cyclic.Int63.Uint63.size_1403) :=
    case s_1402 of {
    | build_state =>
      let count_1404 := proj_0 100 s_1402 in
      case count_1404 of {
      | Z0 =>
        let y_1405 := prim: (int: 0) in
        halt y_1405
      | Zpos =>
        let p_1406 := proj_0 140 count_1404 in
        of_pos_rec_uncurried_known_222<3>(p_1406,Coq.Numbers.Cyclic.Int63.Uint63.size_1403)
      | Zneg =>
        let p_1408 := proj_0 141 count_1404 in
        let y_1410 := app of_pos_rec_uncurried_known_222<3>(p_1408,Coq.Numbers.Cyclic.Int63.Uint63.size_1403) in
        let y_1411 := prim: (int: 0) in
        let prim_1412 := prim_105(y_1411,y_1410) in
        halt prim_1412
      }
    }
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_224<3>(env_1413,s_1414) :=
    let Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1416 := proj_0 442 env_1413 in
    ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_known_223<3>(s_1414,Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1416)
  fun to_Z_rec_uncurried_known_225<3>(i_1418,n_1419) :=
    case n_1419 of {
    | O =>
      let y_1420 := Z0() in
      halt y_1420
    | S =>
      let n_1421 := proj_0 135 n_1419 in
      let y_1423 := prim: (int: 1) in
      let prim_1424 := prim_102(i_1418,y_1423) in
      let y_1425 := prim: (int: 0) in
      let prim_1426 := prim_101(prim_1424,y_1425) in
      let y_1427 := app f_case_known_226<161>(prim_1426) in
      let y_1428 := prim: (int: 1) in
      let prim_1429 := prim_103(i_1418,y_1428) in
      let y_1430 := app to_Z_rec_uncurried_known_225<3>(prim_1429,n_1421) in
      let y_code_1431 := proj_0 15 y_1427 in
      let y_env_1432 := proj_1 15 y_1427 in
      y_code_1431<3>(y_env_1432,y_1430)
    }
  fun f_case_known_226<161>(s_1434) :=
    case s_1434 of {
    | true =>
      let Coq.ZArith.BinIntDef.Z.double_wrapperbogus_env_1435 := con_446() in
      let Coq.ZArith.BinIntDef.Z.double_wrapper_clo_1436 := con_15(Coq.ZArith.BinIntDef.Z.double_wrapper_214,Coq.ZArith.BinIntDef.Z.double_wrapperbogus_env_1435) in
      halt Coq.ZArith.BinIntDef.Z.double_wrapper_clo_1436
    | false =>
      let Coq.ZArith.BinIntDef.Z.succ_double_wrapperbogus_env_1437 := con_447() in
      let Coq.ZArith.BinIntDef.Z.succ_double_wrapper_clo_1438 := con_15(Coq.ZArith.BinIntDef.Z.succ_double_wrapper_216,Coq.ZArith.BinIntDef.Z.succ_double_wrapperbogus_env_1437) in
      halt Coq.ZArith.BinIntDef.Z.succ_double_wrapper_clo_1438
    }
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_known_227<88>(p_1440,y_1441,Coq.Numbers.Cyclic.Int63.Uint63.size_1442) :=
    let z_1444 := app to_Z_rec_uncurried_known_225<3>(p_1440,Coq.Numbers.Cyclic.Int63.Uint63.size_1442) in
    let y_1445 := Z0() in
    let y_1447 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(y_1445,z_1444,y_1441) in
    case y_1447 of {
    | true =>
      let y_1449 := app Coq.ZArith.BinIntDef.Z.opp_known_221<160>(z_1444) in
      let y_1450 := Dec(y_1449) in
      let y_1451 := Some(y_1450) in
      halt y_1451
    | false =>
      let y_1452 := Inc(z_1444) in
      let y_1453 := Some(y_1452) in
      halt y_1453
    }
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_wrapper_228<3>(env_1454,p_1455) :=
    let y_proj_1457 := proj_0 452 env_1454 in
    let Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1458 := proj_1 452 env_1454 in
    ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_known_227<88>(p_1455,y_proj_1457,Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1458)
  fun y_wrapper_229<3>(env_1459,init_value_1460) :=
    let ctx_proj_1461 := proj_0 458 env_1459 in
    let y_1463 := app f_case_known_231<162>(ctx_proj_1461) in
    let y_1464 := build_state(init_value_1460,y_1463) in
    let y_1465 := Ok(y_1464) in
    halt y_1465
  fun y_wrapper_230<3>(env_1466,ctx_1467) :=
    let chain_proj_1468 := proj_0 460 env_1466 in
    let env_1469 := con_458(ctx_1467,chain_proj_1468) in
    let y_wrapper_clo_1470 := con_15(y_wrapper_229,env_1469) in
    halt y_wrapper_clo_1470
  fun f_case_known_231<162>(s_1472) :=
    case s_1472 of {
    | build_ctx =>
      let ctx_from_1473 := proj_1 114 s_1472 in
      halt ctx_from_1473
    }
  fun y_wrapper_232<3>(env_1474,chain_1475) :=
    let env_1476 := con_460(chain_1475) in
    let y_wrapper_clo_1477 := con_15(y_wrapper_230,env_1476) in
    halt y_wrapper_clo_1477
  fun y_233<3>(env_1478,msg_1479) :=
    let state_proj_1481 := proj_0 468 env_1478 in
    let y_proj_1484 := proj_5 468 env_1478 in
    let y_proj_1485 := proj_4 468 env_1478 in
    let ConCert.Examples.Counter.Counter.default_error_proj_1486 := proj_3 468 env_1478 in
    y_uncurried_uncurried_uncurried_known_236<53>(msg_1479,state_proj_1481,y_proj_1484,y_proj_1485,ConCert.Examples.Counter.Counter.default_error_proj_1486)
  fun y_wrapper_234<3>(env_1487,state_1488) :=
    let y_proj_1489 := proj_4 470 env_1487 in
    let y_proj_1490 := proj_3 470 env_1487 in
    let ConCert.Examples.Counter.Counter.default_error_proj_1491 := proj_2 470 env_1487 in
    let chain_proj_1492 := proj_1 470 env_1487 in
    let ctx_proj_1493 := proj_0 470 env_1487 in
    let env_1494 := con_468(state_1488,ctx_proj_1493,chain_proj_1492,ConCert.Examples.Counter.Counter.default_error_proj_1491,y_proj_1490,y_proj_1489) in
    let y_clo_1495 := con_15(y_233,env_1494) in
    halt y_clo_1495
  fun y_wrapper_235<3>(env_1496,ctx_1497) :=
    let y_proj_1498 := proj_3 472 env_1496 in
    let y_proj_1499 := proj_2 472 env_1496 in
    let ConCert.Examples.Counter.Counter.default_error_proj_1500 := proj_1 472 env_1496 in
    let chain_proj_1501 := proj_0 472 env_1496 in
    let env_1502 := con_470(ctx_1497,chain_proj_1501,ConCert.Examples.Counter.Counter.default_error_proj_1500,y_proj_1499,y_proj_1498) in
    let y_wrapper_clo_1503 := con_15(y_wrapper_234,env_1502) in
    halt y_wrapper_clo_1503
  fun y_uncurried_uncurried_uncurried_known_236<53>(msg_1505,state_1506,y_1509,y_1510,ConCert.Examples.Counter.Counter.default_error_1511) :=
    case msg_1505 of {
    | Some =>
      let m_1512 := proj_0 145 msg_1505 in
      let env_1513 := con_474(state_1506,ConCert.Examples.Counter.Counter.default_error_1511,y_1510,y_1509) in
      let y_1514 := app f_case_237<3>(env_1513,m_1512) in
      case y_1514 of {
      | Ok =>
        let res_1515 := proj_0 101 y_1514 in
        let y_1516 := nil() in
        let y_1517 := pair(res_1515,y_1516) in
        let y_1518 := Ok(y_1517) in
        halt y_1518
      | Err =>
        let e_1519 := proj_0 102 y_1514 in
        let y_1520 := Err(e_1519) in
        halt y_1520
      }
    | None =>
      let y_1521 := Err(ConCert.Examples.Counter.Counter.default_error_1511) in
      halt y_1521
    }
  fun f_case_237<3>(env_1522,s_1523) :=
    case s_1523 of {
    | Inc =>
      let i_1524 := proj_0 137 s_1523 in
      let y_1525 := Z0() in
      let y_proj_1527 := proj_3 474 env_1522 in
      let y_1528 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(i_1524,y_1525,y_proj_1527) in
      case y_1528 of {
      | true =>
        let state_proj_1530 := proj_0 474 env_1522 in
        let y_1532 := app ConCert.Examples.Counter.Counter.count_uncurried_known_219<158>(state_proj_1530) in
        let y_1534 := app Coq.ZArith.BinIntDef.Z.add_uncurried_known_218<3>(i_1524,y_1532) in
        let state_proj_1536 := proj_0 474 env_1522 in
        let y_1538 := app ConCert.Examples.Counter.Counter.owner_uncurried_known_220<159>(state_proj_1536) in
        let y_1539 := build_state(y_1534,y_1538) in
        let y_1540 := Ok(y_1539) in
        halt y_1540
      | false =>
        let ConCert.Examples.Counter.Counter.default_error_proj_1541 := proj_1 474 env_1522 in
        let y_1542 := Err(ConCert.Examples.Counter.Counter.default_error_proj_1541) in
        halt y_1542
      }
    | Dec =>
      let i_1543 := proj_0 138 s_1523 in
      let y_1544 := Z0() in
      let y_proj_1546 := proj_3 474 env_1522 in
      let y_1547 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(i_1543,y_1544,y_proj_1546) in
      case y_1547 of {
      | true =>
        let state_proj_1549 := proj_0 474 env_1522 in
        let y_1551 := app ConCert.Examples.Counter.Counter.count_uncurried_known_219<158>(state_proj_1549) in
        let y_1553 := app Coq.ZArith.BinIntDef.Z.opp_known_221<160>(i_1543) in
        let y_1555 := app Coq.ZArith.BinIntDef.Z.add_uncurried_known_218<3>(y_1553,y_1551) in
        let state_proj_1557 := proj_0 474 env_1522 in
        let y_1559 := app ConCert.Examples.Counter.Counter.owner_uncurried_known_220<159>(state_proj_1557) in
        let y_1560 := build_state(y_1555,y_1559) in
        let y_1561 := Ok(y_1560) in
        halt y_1561
      | false =>
        let ConCert.Examples.Counter.Counter.default_error_proj_1562 := proj_1 474 env_1522 in
        let y_1563 := Err(ConCert.Examples.Counter.Counter.default_error_proj_1562) in
        halt y_1563
      }
    }
  fun y_wrapper_238<3>(env_1564,chain_1565) :=
    let y_proj_1566 := proj_0 484 env_1564 in
    let y_proj_1567 := proj_1 484 env_1564 in
    let ConCert.Examples.Counter.Counter.default_error_proj_1568 := proj_2 484 env_1564 in
    let env_1569 := con_472(chain_1565,ConCert.Examples.Counter.Counter.default_error_proj_1568,y_proj_1567,y_proj_1566) in
    let y_wrapper_clo_1570 := con_15(y_wrapper_235,env_1569) in
    halt y_wrapper_clo_1570
  fun y_wrapper_239<3>(env_1571,p_1572) :=
    let Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1573 := proj_0 488 env_1571 in
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_proj_1574 := proj_1 488 env_1571 in
    let y_1576 := app to_Z_rec_uncurried_known_225<3>(p_1572,Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1573) in
    let y_1577 := build_state(y_1576,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_proj_1574) in
    halt y_1577
] in
let y_1578 := Eq() in
let env_1579 := con_239() in
let env_1580 := con_245() in
let y_1581 := con_99() in
let y_wrapper_clo_1582 := con_15(y_wrapper_146,env_1579) in
let y_wrapper_clo_1583 := con_15(y_wrapper_149,env_1580) in
let stdpp.countable.N_countable_1584 := Build_Countable(y_wrapper_clo_1582,y_wrapper_clo_1583,y_1581) in
let env_1585 := con_252() in
let env_1586 := con_265() in
let y_wrapper_clo_1587 := con_15(y_wrapper_152,env_1585) in
let y_wrapper_clo_1588 := con_15(y_wrapper_157,env_1586) in
let ConCert.Execution.OptionMonad.Monad_option_1589 := build_monad(y_wrapper_clo_1587,y_wrapper_clo_1588) in
let env_1590 := con_286() in
let y_1591 := ser_int() in
let env_1592 := con_288(y_1591) in
let y_1593 := con_99() in
let y_wrapper_clo_1594 := con_15(y_wrapper_166,env_1590) in
let y_clo_1595 := con_15(y_167,env_1592) in
let ConCert.Execution.Serializable.int_serializable_1596 := build_serializable(y_wrapper_clo_1594,y_clo_1595,y_1593) in
let env_1597 := con_301(ConCert.Execution.Serializable.int_serializable_1596) in
let env_1598 := con_303(y_1578,ConCert.Execution.OptionMonad.Monad_option_1589,ConCert.Execution.Serializable.int_serializable_1596) in
let y_1599 := con_99() in
let y_wrapper_clo_1600 := con_15(y_wrapper_176,env_1597) in
let y_clo_1601 := con_15(y_177,env_1598) in
let ConCert.Execution.Serializable.ser_positive_equivalence_1602 := build_serializable(y_wrapper_clo_1600,y_clo_1601,y_1599) in
let y_1603 := xH() in
let y_1604 := xO(y_1603) in
let y_1605 := xH() in
let y_1606 := xO(y_1605) in
let y_1607 := xO(y_1606) in
let y_1608 := xO(y_1607) in
let y_1609 := Npos(y_1608) in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1611 := app f_case_known_191<3>(y_1609,y_1604) in
let y_1612 := con_99() in
let env_1613 := con_355(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1611) in
let env_1614 := con_362(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1611) in
let env_1615 := con_369(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1611) in
let env_1616 := con_273(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1611,stdpp.countable.N_countable_1584) in
let env_1617 := con_275(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1611,ConCert.Execution.OptionMonad.Monad_option_1589,stdpp.countable.N_countable_1584,y_1578) in
let y_1618 := con_99() in
let y_wrapper_clo_1619 := con_15(y_wrapper_160,env_1616) in
let y_clo_1620 := con_15(y_161,env_1617) in
let y_1621 := Build_Countable(y_wrapper_clo_1619,y_clo_1620,y_1618) in
let env_1622 := con_382(y_1578,stdpp.countable.N_countable_1584,ConCert.Execution.OptionMonad.Monad_option_1589,ConCert.Execution.Serializable.ser_positive_equivalence_1602,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1611) in
let env_1623 := con_384(y_1578,stdpp.countable.N_countable_1584,ConCert.Execution.OptionMonad.Monad_option_1589,ConCert.Execution.Serializable.ser_positive_equivalence_1602,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1611) in
let y_1624 := con_99() in
let y_wrapper_clo_1625 := con_15(y_wrapper_203,env_1622) in
let y_clo_1626 := con_15(y_204,env_1623) in
let y_1627 := build_serializable(y_wrapper_clo_1625,y_clo_1626,y_1624) in
let env_1628 := con_399(y_1578,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1611) in
let y_wrapper_clo_1629 := con_15(y_wrapper_195,env_1613) in
let y_wrapper_clo_1630 := con_15(y_wrapper_197,env_1614) in
let y_wrapper_clo_1631 := con_15(y_wrapper_199,env_1615) in
let y_clo_1632 := con_15(y_209,env_1628) in
let y_1633 := build_chain_base(y_1612,y_wrapper_clo_1629,y_wrapper_clo_1630,y_wrapper_clo_1631,y_1621,y_1627,y_clo_1632) in
let y_1634 := O() in
let ConCert.Examples.Counter.Counter.default_error_1635 := S(y_1634) in
let y_1636 := O() in
let y_1637 := S(y_1636) in
let y_1638 := S(y_1637) in
let y_1639 := S(y_1638) in
let y_1640 := S(y_1639) in
let y_1641 := S(y_1640) in
let y_1642 := S(y_1641) in
let y_1643 := S(y_1642) in
let y_1644 := S(y_1643) in
let y_1645 := S(y_1644) in
let y_1646 := S(y_1645) in
let y_1647 := S(y_1646) in
let y_1648 := S(y_1647) in
let y_1649 := S(y_1648) in
let y_1650 := S(y_1649) in
let y_1651 := S(y_1650) in
let y_1652 := S(y_1651) in
let y_1653 := S(y_1652) in
let y_1654 := S(y_1653) in
let y_1655 := S(y_1654) in
let y_1656 := S(y_1655) in
let y_1657 := S(y_1656) in
let y_1658 := S(y_1657) in
let y_1659 := S(y_1658) in
let y_1660 := S(y_1659) in
let y_1661 := S(y_1660) in
let y_1662 := S(y_1661) in
let y_1663 := S(y_1662) in
let y_1664 := S(y_1663) in
let y_1665 := S(y_1664) in
let y_1666 := S(y_1665) in
let y_1667 := S(y_1666) in
let y_1668 := S(y_1667) in
let y_1669 := S(y_1668) in
let y_1670 := S(y_1669) in
let y_1671 := S(y_1670) in
let y_1672 := S(y_1671) in
let y_1673 := S(y_1672) in
let y_1674 := S(y_1673) in
let y_1675 := S(y_1674) in
let y_1676 := S(y_1675) in
let y_1677 := S(y_1676) in
let y_1678 := S(y_1677) in
let y_1679 := S(y_1678) in
let y_1680 := S(y_1679) in
let y_1681 := S(y_1680) in
let y_1682 := S(y_1681) in
let y_1683 := S(y_1682) in
let y_1684 := S(y_1683) in
let y_1685 := S(y_1684) in
let y_1686 := S(y_1685) in
let y_1687 := S(y_1686) in
let y_1688 := S(y_1687) in
let y_1689 := S(y_1688) in
let y_1690 := S(y_1689) in
let y_1691 := S(y_1690) in
let y_1692 := S(y_1691) in
let y_1693 := S(y_1692) in
let y_1694 := S(y_1693) in
let y_1695 := S(y_1694) in
let y_1696 := S(y_1695) in
let y_1697 := S(y_1696) in
let y_1698 := S(y_1697) in
let Coq.Numbers.Cyclic.Int63.Uint63.size_1699 := S(y_1698) in
let env_1700 := con_442(Coq.Numbers.Cyclic.Int63.Uint63.size_1699) in
let y_1701 := N0() in
let y_1702 := con_99() in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_1703 := bounded(y_1701,y_1702) in
let env_1704 := con_452(y_1578,Coq.Numbers.Cyclic.Int63.Uint63.size_1699) in
let env_1705 := con_463() in
let env_1706 := con_484(y_1578,y_1633,ConCert.Examples.Counter.Counter.default_error_1635) in
let env_1707 := con_488(Coq.Numbers.Cyclic.Int63.Uint63.size_1699,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_1703) in
let y_wrapper_clo_1708 := con_15(y_wrapper_232,env_1705) in
let y_wrapper_clo_1709 := con_15(y_wrapper_238,env_1706) in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_clo_1710 := con_15(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_224,env_1700) in
let y_wrapper_clo_1711 := con_15(y_wrapper_239,env_1707) in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_wrapper_clo_1712 := con_15(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_wrapper_228,env_1704) in
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.COUNTER_MODULE_1713 := Build_ConcordiumWasmMod(y_wrapper_clo_1708,y_wrapper_clo_1709,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_clo_1710,y_wrapper_clo_1711,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.make_msg_wrapper_clo_1712) in
halt ConCert.Examples.Counter.extraction.CounterConcordiumWasm.COUNTER_MODULE_1713
